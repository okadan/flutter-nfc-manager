// Autogenerated from Pigeon (v7.2.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

enum PigeonPollingOption {
  iso14443,
  iso15693,
  iso18092,
}

enum PigeonNdefStatus {
  notSupported,
  readWrite,
  readOnly,
}

enum PigeonTypeNameFormat {
  empty,
  nfcWellKnown,
  media,
  absoluteUri,
  nfcExternal,
  unknown,
  unchanged,
}

enum PigeonFeliCaPollingRequestCode {
  noRequest,
  systemCode,
  communicationPerformance,
}

enum PigeonFeliCaPollingTimeSlot {
  max1,
  max2,
  max4,
  max8,
  max16,
}

enum PigeonIso15693RequestFlag {
  address,
  dualSubCarriers,
  highDataRate,
  option,
  protocolExtension,
  select,
}

enum PigeonMiFareFamily {
  unknown,
  ultralight,
  plus,
  desfire,
}

class PigeonTag {
  PigeonTag({
    this.handle,
    this.ndef,
    this.feliCa,
    this.iso15693,
    this.iso7816,
    this.miFare,
  });

  String? handle;

  PigeonNdef? ndef;

  PigeonFeliCa? feliCa;

  PigeonISO15693? iso15693;

  PigeonISO7816? iso7816;

  PigeonMiFare? miFare;

  Object encode() {
    return <Object?>[
      handle,
      ndef?.encode(),
      feliCa?.encode(),
      iso15693?.encode(),
      iso7816?.encode(),
      miFare?.encode(),
    ];
  }

  static PigeonTag decode(Object result) {
    result as List<Object?>;
    return PigeonTag(
      handle: result[0] as String?,
      ndef: result[1] != null
          ? PigeonNdef.decode(result[1]! as List<Object?>)
          : null,
      feliCa: result[2] != null
          ? PigeonFeliCa.decode(result[2]! as List<Object?>)
          : null,
      iso15693: result[3] != null
          ? PigeonISO15693.decode(result[3]! as List<Object?>)
          : null,
      iso7816: result[4] != null
          ? PigeonISO7816.decode(result[4]! as List<Object?>)
          : null,
      miFare: result[5] != null
          ? PigeonMiFare.decode(result[5]! as List<Object?>)
          : null,
    );
  }
}

class PigeonNdef {
  PigeonNdef({
    this.status,
    this.capacity,
    this.cachedNdefMessage,
  });

  PigeonNdefStatus? status;

  int? capacity;

  PigeonNdefMessage? cachedNdefMessage;

  Object encode() {
    return <Object?>[
      status?.index,
      capacity,
      cachedNdefMessage?.encode(),
    ];
  }

  static PigeonNdef decode(Object result) {
    result as List<Object?>;
    return PigeonNdef(
      status: result[0] != null
          ? PigeonNdefStatus.values[result[0]! as int]
          : null,
      capacity: result[1] as int?,
      cachedNdefMessage: result[2] != null
          ? PigeonNdefMessage.decode(result[2]! as List<Object?>)
          : null,
    );
  }
}

class PigeonFeliCa {
  PigeonFeliCa({
    this.currentSystemCode,
    this.currentIDm,
  });

  Uint8List? currentSystemCode;

  Uint8List? currentIDm;

  Object encode() {
    return <Object?>[
      currentSystemCode,
      currentIDm,
    ];
  }

  static PigeonFeliCa decode(Object result) {
    result as List<Object?>;
    return PigeonFeliCa(
      currentSystemCode: result[0] as Uint8List?,
      currentIDm: result[1] as Uint8List?,
    );
  }
}

class PigeonISO15693 {
  PigeonISO15693({
    this.icManufacturerCode,
    this.icSerialNumber,
    this.identifier,
  });

  int? icManufacturerCode;

  Uint8List? icSerialNumber;

  Uint8List? identifier;

  Object encode() {
    return <Object?>[
      icManufacturerCode,
      icSerialNumber,
      identifier,
    ];
  }

  static PigeonISO15693 decode(Object result) {
    result as List<Object?>;
    return PigeonISO15693(
      icManufacturerCode: result[0] as int?,
      icSerialNumber: result[1] as Uint8List?,
      identifier: result[2] as Uint8List?,
    );
  }
}

class PigeonISO7816 {
  PigeonISO7816({
    this.initialSelectedAID,
    this.identifier,
    this.historicalBytes,
    this.applicationData,
    this.proprietaryApplicationDataCoding,
  });

  String? initialSelectedAID;

  Uint8List? identifier;

  Uint8List? historicalBytes;

  Uint8List? applicationData;

  bool? proprietaryApplicationDataCoding;

  Object encode() {
    return <Object?>[
      initialSelectedAID,
      identifier,
      historicalBytes,
      applicationData,
      proprietaryApplicationDataCoding,
    ];
  }

  static PigeonISO7816 decode(Object result) {
    result as List<Object?>;
    return PigeonISO7816(
      initialSelectedAID: result[0] as String?,
      identifier: result[1] as Uint8List?,
      historicalBytes: result[2] as Uint8List?,
      applicationData: result[3] as Uint8List?,
      proprietaryApplicationDataCoding: result[4] as bool?,
    );
  }
}

class PigeonMiFare {
  PigeonMiFare({
    this.mifareFamily,
    this.identifier,
    this.historicalBytes,
  });

  PigeonMiFareFamily? mifareFamily;

  Uint8List? identifier;

  Uint8List? historicalBytes;

  Object encode() {
    return <Object?>[
      mifareFamily?.index,
      identifier,
      historicalBytes,
    ];
  }

  static PigeonMiFare decode(Object result) {
    result as List<Object?>;
    return PigeonMiFare(
      mifareFamily: result[0] != null
          ? PigeonMiFareFamily.values[result[0]! as int]
          : null,
      identifier: result[1] as Uint8List?,
      historicalBytes: result[2] as Uint8List?,
    );
  }
}

class PigeonNDEFQueryStatus {
  PigeonNDEFQueryStatus({
    this.status,
    this.capacity,
  });

  PigeonNdefStatus? status;

  int? capacity;

  Object encode() {
    return <Object?>[
      status?.index,
      capacity,
    ];
  }

  static PigeonNDEFQueryStatus decode(Object result) {
    result as List<Object?>;
    return PigeonNDEFQueryStatus(
      status: result[0] != null
          ? PigeonNdefStatus.values[result[0]! as int]
          : null,
      capacity: result[1] as int?,
    );
  }
}

class PigeonNdefMessage {
  PigeonNdefMessage({
    this.records,
  });

  List<PigeonNdefPayload?>? records;

  Object encode() {
    return <Object?>[
      records,
    ];
  }

  static PigeonNdefMessage decode(Object result) {
    result as List<Object?>;
    return PigeonNdefMessage(
      records: (result[0] as List<Object?>?)?.cast<PigeonNdefPayload?>(),
    );
  }
}

class PigeonNdefPayload {
  PigeonNdefPayload({
    this.typeNameFormat,
    this.type,
    this.identifier,
    this.payload,
  });

  PigeonTypeNameFormat? typeNameFormat;

  Uint8List? type;

  Uint8List? identifier;

  Uint8List? payload;

  Object encode() {
    return <Object?>[
      typeNameFormat?.index,
      type,
      identifier,
      payload,
    ];
  }

  static PigeonNdefPayload decode(Object result) {
    result as List<Object?>;
    return PigeonNdefPayload(
      typeNameFormat: result[0] != null
          ? PigeonTypeNameFormat.values[result[0]! as int]
          : null,
      type: result[1] as Uint8List?,
      identifier: result[2] as Uint8List?,
      payload: result[3] as Uint8List?,
    );
  }
}

class PigeonFeliCaPollingResponse {
  PigeonFeliCaPollingResponse({
    this.manufacturerParameter,
    this.requestData,
  });

  Uint8List? manufacturerParameter;

  Uint8List? requestData;

  Object encode() {
    return <Object?>[
      manufacturerParameter,
      requestData,
    ];
  }

  static PigeonFeliCaPollingResponse decode(Object result) {
    result as List<Object?>;
    return PigeonFeliCaPollingResponse(
      manufacturerParameter: result[0] as Uint8List?,
      requestData: result[1] as Uint8List?,
    );
  }
}

class PigeonFeliCaReadWithoutEncryptionResponse {
  PigeonFeliCaReadWithoutEncryptionResponse({
    this.statusFlag1,
    this.statusFlag2,
    this.blockData,
  });

  int? statusFlag1;

  int? statusFlag2;

  List<Uint8List?>? blockData;

  Object encode() {
    return <Object?>[
      statusFlag1,
      statusFlag2,
      blockData,
    ];
  }

  static PigeonFeliCaReadWithoutEncryptionResponse decode(Object result) {
    result as List<Object?>;
    return PigeonFeliCaReadWithoutEncryptionResponse(
      statusFlag1: result[0] as int?,
      statusFlag2: result[1] as int?,
      blockData: (result[2] as List<Object?>?)?.cast<Uint8List?>(),
    );
  }
}

class PigeonFeliCaRequestServiceV2Response {
  PigeonFeliCaRequestServiceV2Response({
    this.statusFlag1,
    this.statusFlag2,
    this.encryptionIdentifier,
    this.nodeKeyVersionListAES,
    this.nodeKeyVersionListDES,
  });

  int? statusFlag1;

  int? statusFlag2;

  int? encryptionIdentifier;

  List<Uint8List?>? nodeKeyVersionListAES;

  List<Uint8List?>? nodeKeyVersionListDES;

  Object encode() {
    return <Object?>[
      statusFlag1,
      statusFlag2,
      encryptionIdentifier,
      nodeKeyVersionListAES,
      nodeKeyVersionListDES,
    ];
  }

  static PigeonFeliCaRequestServiceV2Response decode(Object result) {
    result as List<Object?>;
    return PigeonFeliCaRequestServiceV2Response(
      statusFlag1: result[0] as int?,
      statusFlag2: result[1] as int?,
      encryptionIdentifier: result[2] as int?,
      nodeKeyVersionListAES: (result[3] as List<Object?>?)?.cast<Uint8List?>(),
      nodeKeyVersionListDES: (result[4] as List<Object?>?)?.cast<Uint8List?>(),
    );
  }
}

class PigeonFeliCaRequestSpecificationVersionResponse {
  PigeonFeliCaRequestSpecificationVersionResponse({
    this.statusFlag1,
    this.statusFlag2,
    this.basicVersion,
    this.optionVersion,
  });

  int? statusFlag1;

  int? statusFlag2;

  Uint8List? basicVersion;

  Uint8List? optionVersion;

  Object encode() {
    return <Object?>[
      statusFlag1,
      statusFlag2,
      basicVersion,
      optionVersion,
    ];
  }

  static PigeonFeliCaRequestSpecificationVersionResponse decode(Object result) {
    result as List<Object?>;
    return PigeonFeliCaRequestSpecificationVersionResponse(
      statusFlag1: result[0] as int?,
      statusFlag2: result[1] as int?,
      basicVersion: result[2] as Uint8List?,
      optionVersion: result[3] as Uint8List?,
    );
  }
}

class PigeonFeliCaStatusFlag {
  PigeonFeliCaStatusFlag({
    this.statusFlag1,
    this.statusFlag2,
  });

  int? statusFlag1;

  int? statusFlag2;

  Object encode() {
    return <Object?>[
      statusFlag1,
      statusFlag2,
    ];
  }

  static PigeonFeliCaStatusFlag decode(Object result) {
    result as List<Object?>;
    return PigeonFeliCaStatusFlag(
      statusFlag1: result[0] as int?,
      statusFlag2: result[1] as int?,
    );
  }
}

class PigeonISO7816APDU {
  PigeonISO7816APDU({
    this.instructionClass,
    this.instructionCode,
    this.p1Parameter,
    this.p2Parameter,
    this.data,
    this.expectedResponseLength,
  });

  int? instructionClass;

  int? instructionCode;

  int? p1Parameter;

  int? p2Parameter;

  Uint8List? data;

  int? expectedResponseLength;

  Object encode() {
    return <Object?>[
      instructionClass,
      instructionCode,
      p1Parameter,
      p2Parameter,
      data,
      expectedResponseLength,
    ];
  }

  static PigeonISO7816APDU decode(Object result) {
    result as List<Object?>;
    return PigeonISO7816APDU(
      instructionClass: result[0] as int?,
      instructionCode: result[1] as int?,
      p1Parameter: result[2] as int?,
      p2Parameter: result[3] as int?,
      data: result[4] as Uint8List?,
      expectedResponseLength: result[5] as int?,
    );
  }
}

class PigeonISO7816ResponseAPDU {
  PigeonISO7816ResponseAPDU({
    this.payload,
    this.statusWord1,
    this.statusWord2,
  });

  Uint8List? payload;

  int? statusWord1;

  int? statusWord2;

  Object encode() {
    return <Object?>[
      payload,
      statusWord1,
      statusWord2,
    ];
  }

  static PigeonISO7816ResponseAPDU decode(Object result) {
    result as List<Object?>;
    return PigeonISO7816ResponseAPDU(
      payload: result[0] as Uint8List?,
      statusWord1: result[1] as int?,
      statusWord2: result[2] as int?,
    );
  }
}

class PigeonISO15693SystemInfo {
  PigeonISO15693SystemInfo({
    this.dataStorageFormatIdentifier,
    this.applicationFamilyIdentifier,
    this.blockSize,
    this.totalBlocks,
    this.icReference,
  });

  int? dataStorageFormatIdentifier;

  int? applicationFamilyIdentifier;

  int? blockSize;

  int? totalBlocks;

  int? icReference;

  Object encode() {
    return <Object?>[
      dataStorageFormatIdentifier,
      applicationFamilyIdentifier,
      blockSize,
      totalBlocks,
      icReference,
    ];
  }

  static PigeonISO15693SystemInfo decode(Object result) {
    result as List<Object?>;
    return PigeonISO15693SystemInfo(
      dataStorageFormatIdentifier: result[0] as int?,
      applicationFamilyIdentifier: result[1] as int?,
      blockSize: result[2] as int?,
      totalBlocks: result[3] as int?,
      icReference: result[4] as int?,
    );
  }
}

class _PigeonFlutterApiCodec extends StandardMessageCodec {
  const _PigeonFlutterApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is PigeonFeliCa) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is PigeonISO15693) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is PigeonISO7816) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is PigeonMiFare) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else if (value is PigeonNdef) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else if (value is PigeonNdefMessage) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    } else if (value is PigeonNdefPayload) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    } else if (value is PigeonTag) {
      buffer.putUint8(135);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return PigeonFeliCa.decode(readValue(buffer)!);
      case 129: 
        return PigeonISO15693.decode(readValue(buffer)!);
      case 130: 
        return PigeonISO7816.decode(readValue(buffer)!);
      case 131: 
        return PigeonMiFare.decode(readValue(buffer)!);
      case 132: 
        return PigeonNdef.decode(readValue(buffer)!);
      case 133: 
        return PigeonNdefMessage.decode(readValue(buffer)!);
      case 134: 
        return PigeonNdefPayload.decode(readValue(buffer)!);
      case 135: 
        return PigeonTag.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

abstract class PigeonFlutterApi {
  static const MessageCodec<Object?> codec = _PigeonFlutterApiCodec();

  void tagReaderSessionDidBecomeActive();

  void tagReaderSessionDidDetect(PigeonTag tag);

  void tagReaderSessionDidInvalidateWithError(String error);

  static void setup(PigeonFlutterApi? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.PigeonFlutterApi.tagReaderSessionDidBecomeActive', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          // ignore message
          api.tagReaderSessionDidBecomeActive();
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.PigeonFlutterApi.tagReaderSessionDidDetect', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.PigeonFlutterApi.tagReaderSessionDidDetect was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final PigeonTag? arg_tag = (args[0] as PigeonTag?);
          assert(arg_tag != null,
              'Argument for dev.flutter.pigeon.PigeonFlutterApi.tagReaderSessionDidDetect was null, expected non-null PigeonTag.');
          api.tagReaderSessionDidDetect(arg_tag!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.PigeonFlutterApi.tagReaderSessionDidInvalidateWithError', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.PigeonFlutterApi.tagReaderSessionDidInvalidateWithError was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_error = (args[0] as String?);
          assert(arg_error != null,
              'Argument for dev.flutter.pigeon.PigeonFlutterApi.tagReaderSessionDidInvalidateWithError was null, expected non-null String.');
          api.tagReaderSessionDidInvalidateWithError(arg_error!);
          return;
        });
      }
    }
  }
}

class _PigeonHostApiCodec extends StandardMessageCodec {
  const _PigeonHostApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is PigeonFeliCaPollingResponse) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is PigeonFeliCaReadWithoutEncryptionResponse) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is PigeonFeliCaRequestServiceV2Response) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is PigeonFeliCaRequestSpecificationVersionResponse) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else if (value is PigeonFeliCaStatusFlag) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else if (value is PigeonISO15693SystemInfo) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    } else if (value is PigeonISO7816APDU) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    } else if (value is PigeonISO7816ResponseAPDU) {
      buffer.putUint8(135);
      writeValue(buffer, value.encode());
    } else if (value is PigeonNDEFQueryStatus) {
      buffer.putUint8(136);
      writeValue(buffer, value.encode());
    } else if (value is PigeonNdefMessage) {
      buffer.putUint8(137);
      writeValue(buffer, value.encode());
    } else if (value is PigeonNdefMessage) {
      buffer.putUint8(138);
      writeValue(buffer, value.encode());
    } else if (value is PigeonNdefPayload) {
      buffer.putUint8(139);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return PigeonFeliCaPollingResponse.decode(readValue(buffer)!);
      case 129: 
        return PigeonFeliCaReadWithoutEncryptionResponse.decode(readValue(buffer)!);
      case 130: 
        return PigeonFeliCaRequestServiceV2Response.decode(readValue(buffer)!);
      case 131: 
        return PigeonFeliCaRequestSpecificationVersionResponse.decode(readValue(buffer)!);
      case 132: 
        return PigeonFeliCaStatusFlag.decode(readValue(buffer)!);
      case 133: 
        return PigeonISO15693SystemInfo.decode(readValue(buffer)!);
      case 134: 
        return PigeonISO7816APDU.decode(readValue(buffer)!);
      case 135: 
        return PigeonISO7816ResponseAPDU.decode(readValue(buffer)!);
      case 136: 
        return PigeonNDEFQueryStatus.decode(readValue(buffer)!);
      case 137: 
        return PigeonNdefMessage.decode(readValue(buffer)!);
      case 138: 
        return PigeonNdefMessage.decode(readValue(buffer)!);
      case 139: 
        return PigeonNdefPayload.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class PigeonHostApi {
  /// Constructor for [PigeonHostApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  PigeonHostApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _PigeonHostApiCodec();

  Future<bool> tagReaderSessionReadingAvailable() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PigeonHostApi.tagReaderSessionReadingAvailable', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as bool?)!;
    }
  }

  Future<void> tagReaderSessionBegin(List<PigeonPollingOption?> arg_pollingOptions, String? arg_alertMessage) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PigeonHostApi.tagReaderSessionBegin', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_pollingOptions, arg_alertMessage]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> tagReaderSessionInvalidate(String? arg_alertMessage, String? arg_errorMessage) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PigeonHostApi.tagReaderSessionInvalidate', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_alertMessage, arg_errorMessage]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> tagReaderSessionRestartPolling() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PigeonHostApi.tagReaderSessionRestartPolling', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<PigeonNDEFQueryStatus> ndefQueryNDEFStatus(String arg_handle) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PigeonHostApi.ndefQueryNDEFStatus', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_handle]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as PigeonNDEFQueryStatus?)!;
    }
  }

  Future<PigeonNdefMessage?> ndefReadNDEF(String arg_handle) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PigeonHostApi.ndefReadNDEF', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_handle]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return (replyList[0] as PigeonNdefMessage?);
    }
  }

  Future<void> ndefWriteNDEF(String arg_handle, PigeonNdefMessage arg_message) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PigeonHostApi.ndefWriteNDEF', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_handle, arg_message]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> ndefWriteLock(String arg_handle) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PigeonHostApi.ndefWriteLock', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_handle]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<PigeonFeliCaPollingResponse> feliCaPolling(String arg_handle, Uint8List arg_systemCode, PigeonFeliCaPollingRequestCode arg_requestCode, PigeonFeliCaPollingTimeSlot arg_timeSlot) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PigeonHostApi.feliCaPolling', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_handle, arg_systemCode, arg_requestCode.index, arg_timeSlot.index]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as PigeonFeliCaPollingResponse?)!;
    }
  }

  Future<List<Uint8List?>> feliCaRequestService(String arg_handle, List<Uint8List?> arg_nodeCodeList) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PigeonHostApi.feliCaRequestService', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_handle, arg_nodeCodeList]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as List<Object?>?)!.cast<Uint8List?>();
    }
  }

  Future<int> feliCaRequestResponse(String arg_handle) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PigeonHostApi.feliCaRequestResponse', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_handle]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as int?)!;
    }
  }

  Future<PigeonFeliCaReadWithoutEncryptionResponse> feliCaReadWithoutEncryption(String arg_handle, List<Uint8List?> arg_serviceCodeList, List<Uint8List?> arg_blockList) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PigeonHostApi.feliCaReadWithoutEncryption', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_handle, arg_serviceCodeList, arg_blockList]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as PigeonFeliCaReadWithoutEncryptionResponse?)!;
    }
  }

  Future<PigeonFeliCaStatusFlag> feliCaWriteWithoutEncryption(String arg_handle, List<Uint8List?> arg_serviceCodeList, List<Uint8List?> arg_blockList, List<Uint8List?> arg_blockData) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PigeonHostApi.feliCaWriteWithoutEncryption', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_handle, arg_serviceCodeList, arg_blockList, arg_blockData]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as PigeonFeliCaStatusFlag?)!;
    }
  }

  Future<List<Uint8List?>> feliCaRequestSystemCode(String arg_handle) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PigeonHostApi.feliCaRequestSystemCode', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_handle]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as List<Object?>?)!.cast<Uint8List?>();
    }
  }

  Future<PigeonFeliCaRequestServiceV2Response> feliCaRequestServiceV2(String arg_handle, List<Uint8List?> arg_nodeCodeList) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PigeonHostApi.feliCaRequestServiceV2', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_handle, arg_nodeCodeList]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as PigeonFeliCaRequestServiceV2Response?)!;
    }
  }

  Future<PigeonFeliCaRequestSpecificationVersionResponse> feliCaRequestSpecificationVersion(String arg_handle) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PigeonHostApi.feliCaRequestSpecificationVersion', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_handle]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as PigeonFeliCaRequestSpecificationVersionResponse?)!;
    }
  }

  Future<PigeonFeliCaStatusFlag> feliCaResetMode(String arg_handle) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PigeonHostApi.feliCaResetMode', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_handle]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as PigeonFeliCaStatusFlag?)!;
    }
  }

  Future<Uint8List> feliCaSendFeliCaCommand(String arg_handle, Uint8List arg_commandPacket) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PigeonHostApi.feliCaSendFeliCaCommand', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_handle, arg_commandPacket]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as Uint8List?)!;
    }
  }

  Future<Uint8List> miFareSendMiFareCommand(String arg_handle, Uint8List arg_commandPacket) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PigeonHostApi.miFareSendMiFareCommand', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_handle, arg_commandPacket]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as Uint8List?)!;
    }
  }

  Future<PigeonISO7816ResponseAPDU> miFareSendMiFareISO7816Command(String arg_handle, PigeonISO7816APDU arg_apdu) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PigeonHostApi.miFareSendMiFareISO7816Command', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_handle, arg_apdu]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as PigeonISO7816ResponseAPDU?)!;
    }
  }

  Future<PigeonISO7816ResponseAPDU> miFareSendMiFareISO7816CommandRaw(String arg_handle, Uint8List arg_data) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PigeonHostApi.miFareSendMiFareISO7816CommandRaw', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_handle, arg_data]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as PigeonISO7816ResponseAPDU?)!;
    }
  }

  Future<PigeonISO7816ResponseAPDU> iso7816SendCommand(String arg_handle, PigeonISO7816APDU arg_apdu) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PigeonHostApi.iso7816SendCommand', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_handle, arg_apdu]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as PigeonISO7816ResponseAPDU?)!;
    }
  }

  Future<PigeonISO7816ResponseAPDU> iso7816SendCommandRaw(String arg_handle, Uint8List arg_data) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PigeonHostApi.iso7816SendCommandRaw', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_handle, arg_data]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as PigeonISO7816ResponseAPDU?)!;
    }
  }

  Future<void> iso15693StayQuiet(String arg_handle) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PigeonHostApi.iso15693StayQuiet', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_handle]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<Uint8List> iso15693ReadSingleBlock(String arg_handle, List<PigeonIso15693RequestFlag?> arg_requestFlags, int arg_blockNumber) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PigeonHostApi.iso15693ReadSingleBlock', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_handle, arg_requestFlags, arg_blockNumber]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as Uint8List?)!;
    }
  }

  Future<void> iso15693WriteSingleBlock(String arg_handle, List<PigeonIso15693RequestFlag?> arg_requestFlags, int arg_blockNumber, Uint8List arg_dataBlock) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PigeonHostApi.iso15693WriteSingleBlock', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_handle, arg_requestFlags, arg_blockNumber, arg_dataBlock]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> iso15693LockBlock(String arg_handle, List<PigeonIso15693RequestFlag?> arg_requestFlags, int arg_blockNumber) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PigeonHostApi.iso15693LockBlock', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_handle, arg_requestFlags, arg_blockNumber]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<List<Uint8List?>> iso15693ReadMultipleBlocks(String arg_handle, List<PigeonIso15693RequestFlag?> arg_requestFlags, int arg_blockNumber, int arg_numberOfBlocks) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PigeonHostApi.iso15693ReadMultipleBlocks', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_handle, arg_requestFlags, arg_blockNumber, arg_numberOfBlocks]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as List<Object?>?)!.cast<Uint8List?>();
    }
  }

  Future<void> iso15693WriteMultipleBlocks(String arg_handle, List<PigeonIso15693RequestFlag?> arg_requestFlags, int arg_blockNumber, int arg_numberOfBlocks, List<Uint8List?> arg_dataBlocks) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PigeonHostApi.iso15693WriteMultipleBlocks', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_handle, arg_requestFlags, arg_blockNumber, arg_numberOfBlocks, arg_dataBlocks]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> iso15693Select(String arg_handle, List<PigeonIso15693RequestFlag?> arg_requestFlags) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PigeonHostApi.iso15693Select', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_handle, arg_requestFlags]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> iso15693ResetToReady(String arg_handle, List<PigeonIso15693RequestFlag?> arg_requestFlags) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PigeonHostApi.iso15693ResetToReady', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_handle, arg_requestFlags]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> iso15693WriteAfi(String arg_handle, List<PigeonIso15693RequestFlag?> arg_requestFlags, int arg_afi) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PigeonHostApi.iso15693WriteAfi', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_handle, arg_requestFlags, arg_afi]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> iso15693LockAfi(String arg_handle, List<PigeonIso15693RequestFlag?> arg_requestFlags) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PigeonHostApi.iso15693LockAfi', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_handle, arg_requestFlags]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> iso15693WriteDsfId(String arg_handle, List<PigeonIso15693RequestFlag?> arg_requestFlags, int arg_dsfId) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PigeonHostApi.iso15693WriteDsfId', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_handle, arg_requestFlags, arg_dsfId]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> iso15693LockDsfId(String arg_handle, List<PigeonIso15693RequestFlag?> arg_requestFlags) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PigeonHostApi.iso15693LockDsfId', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_handle, arg_requestFlags]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<PigeonISO15693SystemInfo> iso15693GetSystemInfo(String arg_handle, List<PigeonIso15693RequestFlag?> arg_requestFlags) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PigeonHostApi.iso15693GetSystemInfo', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_handle, arg_requestFlags]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as PigeonISO15693SystemInfo?)!;
    }
  }

  Future<List<int?>> iso15693GetMultipleBlockSecurityStatus(String arg_handle, List<PigeonIso15693RequestFlag?> arg_requestFlags, int arg_blockNumber, int arg_numberOfBlocks) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PigeonHostApi.iso15693GetMultipleBlockSecurityStatus', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_handle, arg_requestFlags, arg_blockNumber, arg_numberOfBlocks]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as List<Object?>?)!.cast<int?>();
    }
  }

  Future<Uint8List> iso15693CustomCommand(String arg_handle, List<PigeonIso15693RequestFlag?> arg_requestFlags, int arg_customCommandCode, Uint8List arg_customRequestParameters) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PigeonHostApi.iso15693CustomCommand', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_handle, arg_requestFlags, arg_customCommandCode, arg_customRequestParameters]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as Uint8List?)!;
    }
  }

  Future<void> disposeTag(String arg_handle) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PigeonHostApi.disposeTag', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_handle]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }
}
