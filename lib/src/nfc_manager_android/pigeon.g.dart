// Autogenerated from Pigeon (v7.2.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

enum PigeonReaderFlag {
  nfcA,
  nfcB,
  nfcBarcode,
  nfcF,
  nfcV,
  noPlatformSounds,
  skipNdefCheck,
}

enum PigeonTypeNameFormat {
  empty,
  wellKnown,
  mimeMedia,
  absoluteUri,
  externalType,
  unknown,
  unchanged,
}

class PigeonTag {
  PigeonTag({
    this.handle,
    this.id,
    this.techList,
    this.ndef,
    this.nfcA,
    this.nfcB,
    this.nfcF,
    this.nfcV,
    this.isoDep,
    this.mifareClassic,
    this.mifareUltralight,
    this.ndefFormatable,
    this.nfcBarcode,
  });

  String? handle;

  Uint8List? id;

  List<String?>? techList;

  PigeonNdef? ndef;

  PigeonNfcA? nfcA;

  PigeonNfcB? nfcB;

  PigeonNfcF? nfcF;

  PigeonNfcV? nfcV;

  PigeonIsoDep? isoDep;

  PigeonMifareClassic? mifareClassic;

  PigeonMifareUltralight? mifareUltralight;

  String? ndefFormatable;

  PigeonNfcBarcode? nfcBarcode;

  Object encode() {
    return <Object?>[
      handle,
      id,
      techList,
      ndef?.encode(),
      nfcA?.encode(),
      nfcB?.encode(),
      nfcF?.encode(),
      nfcV?.encode(),
      isoDep?.encode(),
      mifareClassic?.encode(),
      mifareUltralight?.encode(),
      ndefFormatable,
      nfcBarcode?.encode(),
    ];
  }

  static PigeonTag decode(Object result) {
    result as List<Object?>;
    return PigeonTag(
      handle: result[0] as String?,
      id: result[1] as Uint8List?,
      techList: (result[2] as List<Object?>?)?.cast<String?>(),
      ndef: result[3] != null
          ? PigeonNdef.decode(result[3]! as List<Object?>)
          : null,
      nfcA: result[4] != null
          ? PigeonNfcA.decode(result[4]! as List<Object?>)
          : null,
      nfcB: result[5] != null
          ? PigeonNfcB.decode(result[5]! as List<Object?>)
          : null,
      nfcF: result[6] != null
          ? PigeonNfcF.decode(result[6]! as List<Object?>)
          : null,
      nfcV: result[7] != null
          ? PigeonNfcV.decode(result[7]! as List<Object?>)
          : null,
      isoDep: result[8] != null
          ? PigeonIsoDep.decode(result[8]! as List<Object?>)
          : null,
      mifareClassic: result[9] != null
          ? PigeonMifareClassic.decode(result[9]! as List<Object?>)
          : null,
      mifareUltralight: result[10] != null
          ? PigeonMifareUltralight.decode(result[10]! as List<Object?>)
          : null,
      ndefFormatable: result[11] as String?,
      nfcBarcode: result[12] != null
          ? PigeonNfcBarcode.decode(result[12]! as List<Object?>)
          : null,
    );
  }
}

class PigeonNdef {
  PigeonNdef({
    this.type,
    this.canMakeReadOnly,
    this.isWritable,
    this.maxSize,
    this.cachedNdefMessage,
  });

  String? type;

  bool? canMakeReadOnly;

  bool? isWritable;

  int? maxSize;

  PigeonNdefMessage? cachedNdefMessage;

  Object encode() {
    return <Object?>[
      type,
      canMakeReadOnly,
      isWritable,
      maxSize,
      cachedNdefMessage?.encode(),
    ];
  }

  static PigeonNdef decode(Object result) {
    result as List<Object?>;
    return PigeonNdef(
      type: result[0] as String?,
      canMakeReadOnly: result[1] as bool?,
      isWritable: result[2] as bool?,
      maxSize: result[3] as int?,
      cachedNdefMessage: result[4] != null
          ? PigeonNdefMessage.decode(result[4]! as List<Object?>)
          : null,
    );
  }
}

class PigeonNfcA {
  PigeonNfcA({
    this.atqa,
    this.sak,
  });

  Uint8List? atqa;

  int? sak;

  Object encode() {
    return <Object?>[
      atqa,
      sak,
    ];
  }

  static PigeonNfcA decode(Object result) {
    result as List<Object?>;
    return PigeonNfcA(
      atqa: result[0] as Uint8List?,
      sak: result[1] as int?,
    );
  }
}

class PigeonNfcB {
  PigeonNfcB({
    this.applicationData,
    this.protocolInfo,
  });

  Uint8List? applicationData;

  Uint8List? protocolInfo;

  Object encode() {
    return <Object?>[
      applicationData,
      protocolInfo,
    ];
  }

  static PigeonNfcB decode(Object result) {
    result as List<Object?>;
    return PigeonNfcB(
      applicationData: result[0] as Uint8List?,
      protocolInfo: result[1] as Uint8List?,
    );
  }
}

class PigeonNfcF {
  PigeonNfcF({
    this.manufacturer,
    this.systemCode,
  });

  Uint8List? manufacturer;

  Uint8List? systemCode;

  Object encode() {
    return <Object?>[
      manufacturer,
      systemCode,
    ];
  }

  static PigeonNfcF decode(Object result) {
    result as List<Object?>;
    return PigeonNfcF(
      manufacturer: result[0] as Uint8List?,
      systemCode: result[1] as Uint8List?,
    );
  }
}

class PigeonNfcV {
  PigeonNfcV({
    this.dsfId,
    this.responseFlags,
  });

  int? dsfId;

  int? responseFlags;

  Object encode() {
    return <Object?>[
      dsfId,
      responseFlags,
    ];
  }

  static PigeonNfcV decode(Object result) {
    result as List<Object?>;
    return PigeonNfcV(
      dsfId: result[0] as int?,
      responseFlags: result[1] as int?,
    );
  }
}

class PigeonIsoDep {
  PigeonIsoDep({
    this.hiLayerResponse,
    this.historicalBytes,
    this.isExtendedLengthApduSupported,
  });

  Uint8List? hiLayerResponse;

  Uint8List? historicalBytes;

  bool? isExtendedLengthApduSupported;

  Object encode() {
    return <Object?>[
      hiLayerResponse,
      historicalBytes,
      isExtendedLengthApduSupported,
    ];
  }

  static PigeonIsoDep decode(Object result) {
    result as List<Object?>;
    return PigeonIsoDep(
      hiLayerResponse: result[0] as Uint8List?,
      historicalBytes: result[1] as Uint8List?,
      isExtendedLengthApduSupported: result[2] as bool?,
    );
  }
}

class PigeonMifareClassic {
  PigeonMifareClassic({
    this.type,
    this.blockCount,
    this.sectorCount,
    this.size,
  });

  int? type;

  int? blockCount;

  int? sectorCount;

  int? size;

  Object encode() {
    return <Object?>[
      type,
      blockCount,
      sectorCount,
      size,
    ];
  }

  static PigeonMifareClassic decode(Object result) {
    result as List<Object?>;
    return PigeonMifareClassic(
      type: result[0] as int?,
      blockCount: result[1] as int?,
      sectorCount: result[2] as int?,
      size: result[3] as int?,
    );
  }
}

class PigeonMifareUltralight {
  PigeonMifareUltralight({
    this.type,
  });

  int? type;

  Object encode() {
    return <Object?>[
      type,
    ];
  }

  static PigeonMifareUltralight decode(Object result) {
    result as List<Object?>;
    return PigeonMifareUltralight(
      type: result[0] as int?,
    );
  }
}

class PigeonNfcBarcode {
  PigeonNfcBarcode({
    this.type,
    this.barcode,
  });

  int? type;

  Uint8List? barcode;

  Object encode() {
    return <Object?>[
      type,
      barcode,
    ];
  }

  static PigeonNfcBarcode decode(Object result) {
    result as List<Object?>;
    return PigeonNfcBarcode(
      type: result[0] as int?,
      barcode: result[1] as Uint8List?,
    );
  }
}

class PigeonNdefMessage {
  PigeonNdefMessage({
    this.records,
  });

  List<PigeonNdefRecord?>? records;

  Object encode() {
    return <Object?>[
      records,
    ];
  }

  static PigeonNdefMessage decode(Object result) {
    result as List<Object?>;
    return PigeonNdefMessage(
      records: (result[0] as List<Object?>?)?.cast<PigeonNdefRecord?>(),
    );
  }
}

class PigeonNdefRecord {
  PigeonNdefRecord({
    this.tnf,
    this.type,
    this.id,
    this.payload,
  });

  PigeonTypeNameFormat? tnf;

  Uint8List? type;

  Uint8List? id;

  Uint8List? payload;

  Object encode() {
    return <Object?>[
      tnf?.index,
      type,
      id,
      payload,
    ];
  }

  static PigeonNdefRecord decode(Object result) {
    result as List<Object?>;
    return PigeonNdefRecord(
      tnf: result[0] != null
          ? PigeonTypeNameFormat.values[result[0]! as int]
          : null,
      type: result[1] as Uint8List?,
      id: result[2] as Uint8List?,
      payload: result[3] as Uint8List?,
    );
  }
}

class _PigeonFlutterApiCodec extends StandardMessageCodec {
  const _PigeonFlutterApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is PigeonIsoDep) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is PigeonMifareClassic) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is PigeonMifareUltralight) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is PigeonNdef) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else if (value is PigeonNdefMessage) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else if (value is PigeonNdefRecord) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    } else if (value is PigeonNfcA) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    } else if (value is PigeonNfcB) {
      buffer.putUint8(135);
      writeValue(buffer, value.encode());
    } else if (value is PigeonNfcBarcode) {
      buffer.putUint8(136);
      writeValue(buffer, value.encode());
    } else if (value is PigeonNfcF) {
      buffer.putUint8(137);
      writeValue(buffer, value.encode());
    } else if (value is PigeonNfcV) {
      buffer.putUint8(138);
      writeValue(buffer, value.encode());
    } else if (value is PigeonTag) {
      buffer.putUint8(139);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return PigeonIsoDep.decode(readValue(buffer)!);
      case 129: 
        return PigeonMifareClassic.decode(readValue(buffer)!);
      case 130: 
        return PigeonMifareUltralight.decode(readValue(buffer)!);
      case 131: 
        return PigeonNdef.decode(readValue(buffer)!);
      case 132: 
        return PigeonNdefMessage.decode(readValue(buffer)!);
      case 133: 
        return PigeonNdefRecord.decode(readValue(buffer)!);
      case 134: 
        return PigeonNfcA.decode(readValue(buffer)!);
      case 135: 
        return PigeonNfcB.decode(readValue(buffer)!);
      case 136: 
        return PigeonNfcBarcode.decode(readValue(buffer)!);
      case 137: 
        return PigeonNfcF.decode(readValue(buffer)!);
      case 138: 
        return PigeonNfcV.decode(readValue(buffer)!);
      case 139: 
        return PigeonTag.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

abstract class PigeonFlutterApi {
  static const MessageCodec<Object?> codec = _PigeonFlutterApiCodec();

  void onTagDiscovered(PigeonTag tag);

  void onAdapterStateChanged(int state);

  static void setup(PigeonFlutterApi? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.PigeonFlutterApi.onTagDiscovered', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.PigeonFlutterApi.onTagDiscovered was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final PigeonTag? arg_tag = (args[0] as PigeonTag?);
          assert(arg_tag != null,
              'Argument for dev.flutter.pigeon.PigeonFlutterApi.onTagDiscovered was null, expected non-null PigeonTag.');
          api.onTagDiscovered(arg_tag!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.PigeonFlutterApi.onAdapterStateChanged', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.PigeonFlutterApi.onAdapterStateChanged was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_state = (args[0] as int?);
          assert(arg_state != null,
              'Argument for dev.flutter.pigeon.PigeonFlutterApi.onAdapterStateChanged was null, expected non-null int.');
          api.onAdapterStateChanged(arg_state!);
          return;
        });
      }
    }
  }
}

class _PigeonHostApiCodec extends StandardMessageCodec {
  const _PigeonHostApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is PigeonNdefMessage) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is PigeonNdefMessage) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is PigeonNdefRecord) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return PigeonNdefMessage.decode(readValue(buffer)!);
      case 129: 
        return PigeonNdefMessage.decode(readValue(buffer)!);
      case 130: 
        return PigeonNdefRecord.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class PigeonHostApi {
  /// Constructor for [PigeonHostApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  PigeonHostApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _PigeonHostApiCodec();

  Future<bool> adapterIsEnabled() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PigeonHostApi.adapterIsEnabled', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as bool?)!;
    }
  }

  Future<bool> adapterIsSecureNfcEnabled() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PigeonHostApi.adapterIsSecureNfcEnabled', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as bool?)!;
    }
  }

  Future<bool> adapterIsSecureNfcSupported() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PigeonHostApi.adapterIsSecureNfcSupported', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as bool?)!;
    }
  }

  Future<void> adapterEnableReaderMode(List<PigeonReaderFlag?> arg_flags) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PigeonHostApi.adapterEnableReaderMode', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_flags]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> adapterDisableReaderMode() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PigeonHostApi.adapterDisableReaderMode', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> adapterEnableForegroundDispatch() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PigeonHostApi.adapterEnableForegroundDispatch', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> adapterDisableForegroundDispatch() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PigeonHostApi.adapterDisableForegroundDispatch', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<PigeonNdefMessage?> ndefGetNdefMessage(String arg_handle) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PigeonHostApi.ndefGetNdefMessage', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_handle]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return (replyList[0] as PigeonNdefMessage?);
    }
  }

  Future<void> ndefWriteNdefMessage(String arg_handle, PigeonNdefMessage arg_message) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PigeonHostApi.ndefWriteNdefMessage', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_handle, arg_message]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<bool> ndefMakeReadOnly(String arg_handle) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PigeonHostApi.ndefMakeReadOnly', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_handle]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as bool?)!;
    }
  }

  Future<int> nfcAGetMaxTransceiveLength(String arg_handle) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PigeonHostApi.nfcAGetMaxTransceiveLength', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_handle]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as int?)!;
    }
  }

  Future<int> nfcAGetTimeout(String arg_handle) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PigeonHostApi.nfcAGetTimeout', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_handle]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as int?)!;
    }
  }

  Future<void> nfcASetTimeout(String arg_handle, int arg_timeout) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PigeonHostApi.nfcASetTimeout', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_handle, arg_timeout]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<Uint8List> nfcATransceive(String arg_handle, Uint8List arg_data) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PigeonHostApi.nfcATransceive', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_handle, arg_data]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as Uint8List?)!;
    }
  }

  Future<int> nfcBGetMaxTransceiveLength(String arg_handle) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PigeonHostApi.nfcBGetMaxTransceiveLength', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_handle]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as int?)!;
    }
  }

  Future<Uint8List> nfcBTransceive(String arg_handle, Uint8List arg_data) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PigeonHostApi.nfcBTransceive', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_handle, arg_data]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as Uint8List?)!;
    }
  }

  Future<int> nfcFGetMaxTransceiveLength(String arg_handle) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PigeonHostApi.nfcFGetMaxTransceiveLength', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_handle]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as int?)!;
    }
  }

  Future<int> nfcFGetTimeout(String arg_handle) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PigeonHostApi.nfcFGetTimeout', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_handle]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as int?)!;
    }
  }

  Future<void> nfcFSetTimeout(String arg_handle, int arg_timeout) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PigeonHostApi.nfcFSetTimeout', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_handle, arg_timeout]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<Uint8List> nfcFTransceive(String arg_handle, Uint8List arg_data) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PigeonHostApi.nfcFTransceive', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_handle, arg_data]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as Uint8List?)!;
    }
  }

  Future<int> nfcVGetMaxTransceiveLength(String arg_handle) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PigeonHostApi.nfcVGetMaxTransceiveLength', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_handle]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as int?)!;
    }
  }

  Future<Uint8List> nfcVTransceive(String arg_handle, Uint8List arg_data) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PigeonHostApi.nfcVTransceive', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_handle, arg_data]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as Uint8List?)!;
    }
  }

  Future<int> isoDepGetMaxTransceiveLength(String arg_handle) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PigeonHostApi.isoDepGetMaxTransceiveLength', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_handle]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as int?)!;
    }
  }

  Future<int> isoDepGetTimeout(String arg_handle) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PigeonHostApi.isoDepGetTimeout', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_handle]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as int?)!;
    }
  }

  Future<void> isoDepSetTimeout(String arg_handle, int arg_timeout) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PigeonHostApi.isoDepSetTimeout', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_handle, arg_timeout]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<Uint8List> isoDepTransceive(String arg_handle, Uint8List arg_data) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PigeonHostApi.isoDepTransceive', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_handle, arg_data]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as Uint8List?)!;
    }
  }

  Future<int> mifareClassicGetMaxTransceiveLength(String arg_handle) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PigeonHostApi.mifareClassicGetMaxTransceiveLength', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_handle]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as int?)!;
    }
  }

  Future<int> mifareClassicGetTimeout(String arg_handle) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PigeonHostApi.mifareClassicGetTimeout', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_handle]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as int?)!;
    }
  }

  Future<void> mifareClassicSetTimeout(String arg_handle, int arg_timeout) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PigeonHostApi.mifareClassicSetTimeout', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_handle, arg_timeout]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<int> mifareClassicBlockToSector(String arg_handle, int arg_blockIndex) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PigeonHostApi.mifareClassicBlockToSector', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_handle, arg_blockIndex]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as int?)!;
    }
  }

  Future<int> mifareClassicGetBlockCountInSector(String arg_handle, int arg_sectorIndex) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PigeonHostApi.mifareClassicGetBlockCountInSector', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_handle, arg_sectorIndex]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as int?)!;
    }
  }

  Future<int> mifareClassicSectorToBlock(String arg_handle, int arg_sectorIndex) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PigeonHostApi.mifareClassicSectorToBlock', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_handle, arg_sectorIndex]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as int?)!;
    }
  }

  Future<bool> mifareClassicAuthenticateSectorWithKeyA(String arg_handle, int arg_sectorIndex, Uint8List arg_key) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PigeonHostApi.mifareClassicAuthenticateSectorWithKeyA', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_handle, arg_sectorIndex, arg_key]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as bool?)!;
    }
  }

  Future<bool> mifareClassicAuthenticateSectorWithKeyB(String arg_handle, int arg_sectorIndex, Uint8List arg_key) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PigeonHostApi.mifareClassicAuthenticateSectorWithKeyB', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_handle, arg_sectorIndex, arg_key]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as bool?)!;
    }
  }

  Future<void> mifareClassicIncrement(String arg_handle, int arg_blockIndex, int arg_value) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PigeonHostApi.mifareClassicIncrement', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_handle, arg_blockIndex, arg_value]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> mifareClassicDecrement(String arg_handle, int arg_blockIndex, int arg_value) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PigeonHostApi.mifareClassicDecrement', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_handle, arg_blockIndex, arg_value]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<Uint8List> mifareClassicReadBlock(String arg_handle, int arg_blockIndex) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PigeonHostApi.mifareClassicReadBlock', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_handle, arg_blockIndex]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as Uint8List?)!;
    }
  }

  Future<void> mifareClassicWriteBlock(String arg_handle, int arg_blockIndex, Uint8List arg_data) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PigeonHostApi.mifareClassicWriteBlock', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_handle, arg_blockIndex, arg_data]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> mifareClassicRestore(String arg_handle, int arg_blockIndex) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PigeonHostApi.mifareClassicRestore', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_handle, arg_blockIndex]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> mifareClassicTransfer(String arg_handle, int arg_blockIndex) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PigeonHostApi.mifareClassicTransfer', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_handle, arg_blockIndex]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<Uint8List> mifareClassicTransceive(String arg_handle, Uint8List arg_data) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PigeonHostApi.mifareClassicTransceive', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_handle, arg_data]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as Uint8List?)!;
    }
  }

  Future<int> mifareUltralightGetMaxTransceiveLength(String arg_handle) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PigeonHostApi.mifareUltralightGetMaxTransceiveLength', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_handle]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as int?)!;
    }
  }

  Future<int> mifareUltralightGetTimeout(String arg_handle) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PigeonHostApi.mifareUltralightGetTimeout', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_handle]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as int?)!;
    }
  }

  Future<void> mifareUltralightSetTimeout(String arg_handle, int arg_timeout) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PigeonHostApi.mifareUltralightSetTimeout', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_handle, arg_timeout]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<Uint8List> mifareUltralightReadPages(String arg_handle, int arg_pageOffset) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PigeonHostApi.mifareUltralightReadPages', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_handle, arg_pageOffset]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as Uint8List?)!;
    }
  }

  Future<void> mifareUltralightWritePage(String arg_handle, int arg_pageOffset, Uint8List arg_data) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PigeonHostApi.mifareUltralightWritePage', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_handle, arg_pageOffset, arg_data]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<Uint8List> mifareUltralightTransceive(String arg_handle, Uint8List arg_data) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PigeonHostApi.mifareUltralightTransceive', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_handle, arg_data]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as Uint8List?)!;
    }
  }

  Future<void> ndefFormatableFormat(String arg_handle, PigeonNdefMessage arg_firstMessage) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PigeonHostApi.ndefFormatableFormat', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_handle, arg_firstMessage]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> ndefFormatableFormatReadOnly(String arg_handle, PigeonNdefMessage arg_firstMessage) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PigeonHostApi.ndefFormatableFormatReadOnly', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_handle, arg_firstMessage]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> disposeTag(String arg_handle) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.PigeonHostApi.disposeTag', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_handle]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }
}
