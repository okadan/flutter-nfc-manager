// Autogenerated from Pigeon (v7.2.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package dev.flutter.plugins.nfcmanager;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class Pigeon {
  @NonNull
  private static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<Object>(3);
    errorList.add(exception.toString());
    errorList.add(exception.getClass().getSimpleName());
    errorList.add(
      "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorList;
  }

  public enum PigeonReaderFlag {
    NFC_A(0),
    NFC_B(1),
    NFC_BARCODE(2),
    NFC_F(3),
    NFC_V(4),
    NO_PLATFORM_SOUNDS(5),
    SKIP_NDEF_CHECK(6);

    private final int index;

    private PigeonReaderFlag(final int index) {
      this.index = index;
    }
  }

  public enum PigeonTypeNameFormat {
    EMPTY(0),
    WELL_KNOWN(1),
    MIME_MEDIA(2),
    ABSOLUTE_URI(3),
    EXTERNAL_TYPE(4),
    UNKNOWN(5),
    UNCHANGED(6);

    private final int index;

    private PigeonTypeNameFormat(final int index) {
      this.index = index;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class PigeonTag {
    private @Nullable String handle;

    public @Nullable String getHandle() {
      return handle;
    }

    public void setHandle(@Nullable String setterArg) {
      this.handle = setterArg;
    }

    private @Nullable byte[] id;

    public @Nullable byte[] getId() {
      return id;
    }

    public void setId(@Nullable byte[] setterArg) {
      this.id = setterArg;
    }

    private @Nullable List<String> techList;

    public @Nullable List<String> getTechList() {
      return techList;
    }

    public void setTechList(@Nullable List<String> setterArg) {
      this.techList = setterArg;
    }

    private @Nullable PigeonNdef ndef;

    public @Nullable PigeonNdef getNdef() {
      return ndef;
    }

    public void setNdef(@Nullable PigeonNdef setterArg) {
      this.ndef = setterArg;
    }

    private @Nullable PigeonNfcA nfcA;

    public @Nullable PigeonNfcA getNfcA() {
      return nfcA;
    }

    public void setNfcA(@Nullable PigeonNfcA setterArg) {
      this.nfcA = setterArg;
    }

    private @Nullable PigeonNfcB nfcB;

    public @Nullable PigeonNfcB getNfcB() {
      return nfcB;
    }

    public void setNfcB(@Nullable PigeonNfcB setterArg) {
      this.nfcB = setterArg;
    }

    private @Nullable PigeonNfcF nfcF;

    public @Nullable PigeonNfcF getNfcF() {
      return nfcF;
    }

    public void setNfcF(@Nullable PigeonNfcF setterArg) {
      this.nfcF = setterArg;
    }

    private @Nullable PigeonNfcV nfcV;

    public @Nullable PigeonNfcV getNfcV() {
      return nfcV;
    }

    public void setNfcV(@Nullable PigeonNfcV setterArg) {
      this.nfcV = setterArg;
    }

    private @Nullable PigeonIsoDep isoDep;

    public @Nullable PigeonIsoDep getIsoDep() {
      return isoDep;
    }

    public void setIsoDep(@Nullable PigeonIsoDep setterArg) {
      this.isoDep = setterArg;
    }

    private @Nullable PigeonMifareClassic mifareClassic;

    public @Nullable PigeonMifareClassic getMifareClassic() {
      return mifareClassic;
    }

    public void setMifareClassic(@Nullable PigeonMifareClassic setterArg) {
      this.mifareClassic = setterArg;
    }

    private @Nullable PigeonMifareUltralight mifareUltralight;

    public @Nullable PigeonMifareUltralight getMifareUltralight() {
      return mifareUltralight;
    }

    public void setMifareUltralight(@Nullable PigeonMifareUltralight setterArg) {
      this.mifareUltralight = setterArg;
    }

    private @Nullable String ndefFormatable;

    public @Nullable String getNdefFormatable() {
      return ndefFormatable;
    }

    public void setNdefFormatable(@Nullable String setterArg) {
      this.ndefFormatable = setterArg;
    }

    private @Nullable PigeonNfcBarcode nfcBarcode;

    public @Nullable PigeonNfcBarcode getNfcBarcode() {
      return nfcBarcode;
    }

    public void setNfcBarcode(@Nullable PigeonNfcBarcode setterArg) {
      this.nfcBarcode = setterArg;
    }

    public static final class Builder {

      private @Nullable String handle;

      public @NonNull Builder setHandle(@Nullable String setterArg) {
        this.handle = setterArg;
        return this;
      }

      private @Nullable byte[] id;

      public @NonNull Builder setId(@Nullable byte[] setterArg) {
        this.id = setterArg;
        return this;
      }

      private @Nullable List<String> techList;

      public @NonNull Builder setTechList(@Nullable List<String> setterArg) {
        this.techList = setterArg;
        return this;
      }

      private @Nullable PigeonNdef ndef;

      public @NonNull Builder setNdef(@Nullable PigeonNdef setterArg) {
        this.ndef = setterArg;
        return this;
      }

      private @Nullable PigeonNfcA nfcA;

      public @NonNull Builder setNfcA(@Nullable PigeonNfcA setterArg) {
        this.nfcA = setterArg;
        return this;
      }

      private @Nullable PigeonNfcB nfcB;

      public @NonNull Builder setNfcB(@Nullable PigeonNfcB setterArg) {
        this.nfcB = setterArg;
        return this;
      }

      private @Nullable PigeonNfcF nfcF;

      public @NonNull Builder setNfcF(@Nullable PigeonNfcF setterArg) {
        this.nfcF = setterArg;
        return this;
      }

      private @Nullable PigeonNfcV nfcV;

      public @NonNull Builder setNfcV(@Nullable PigeonNfcV setterArg) {
        this.nfcV = setterArg;
        return this;
      }

      private @Nullable PigeonIsoDep isoDep;

      public @NonNull Builder setIsoDep(@Nullable PigeonIsoDep setterArg) {
        this.isoDep = setterArg;
        return this;
      }

      private @Nullable PigeonMifareClassic mifareClassic;

      public @NonNull Builder setMifareClassic(@Nullable PigeonMifareClassic setterArg) {
        this.mifareClassic = setterArg;
        return this;
      }

      private @Nullable PigeonMifareUltralight mifareUltralight;

      public @NonNull Builder setMifareUltralight(@Nullable PigeonMifareUltralight setterArg) {
        this.mifareUltralight = setterArg;
        return this;
      }

      private @Nullable String ndefFormatable;

      public @NonNull Builder setNdefFormatable(@Nullable String setterArg) {
        this.ndefFormatable = setterArg;
        return this;
      }

      private @Nullable PigeonNfcBarcode nfcBarcode;

      public @NonNull Builder setNfcBarcode(@Nullable PigeonNfcBarcode setterArg) {
        this.nfcBarcode = setterArg;
        return this;
      }

      public @NonNull PigeonTag build() {
        PigeonTag pigeonReturn = new PigeonTag();
        pigeonReturn.setHandle(handle);
        pigeonReturn.setId(id);
        pigeonReturn.setTechList(techList);
        pigeonReturn.setNdef(ndef);
        pigeonReturn.setNfcA(nfcA);
        pigeonReturn.setNfcB(nfcB);
        pigeonReturn.setNfcF(nfcF);
        pigeonReturn.setNfcV(nfcV);
        pigeonReturn.setIsoDep(isoDep);
        pigeonReturn.setMifareClassic(mifareClassic);
        pigeonReturn.setMifareUltralight(mifareUltralight);
        pigeonReturn.setNdefFormatable(ndefFormatable);
        pigeonReturn.setNfcBarcode(nfcBarcode);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(13);
      toListResult.add(handle);
      toListResult.add(id);
      toListResult.add(techList);
      toListResult.add((ndef == null) ? null : ndef.toList());
      toListResult.add((nfcA == null) ? null : nfcA.toList());
      toListResult.add((nfcB == null) ? null : nfcB.toList());
      toListResult.add((nfcF == null) ? null : nfcF.toList());
      toListResult.add((nfcV == null) ? null : nfcV.toList());
      toListResult.add((isoDep == null) ? null : isoDep.toList());
      toListResult.add((mifareClassic == null) ? null : mifareClassic.toList());
      toListResult.add((mifareUltralight == null) ? null : mifareUltralight.toList());
      toListResult.add(ndefFormatable);
      toListResult.add((nfcBarcode == null) ? null : nfcBarcode.toList());
      return toListResult;
    }

    static @NonNull PigeonTag fromList(@NonNull ArrayList<Object> list) {
      PigeonTag pigeonResult = new PigeonTag();
      Object handle = list.get(0);
      pigeonResult.setHandle((String) handle);
      Object id = list.get(1);
      pigeonResult.setId((byte[]) id);
      Object techList = list.get(2);
      pigeonResult.setTechList((List<String>) techList);
      Object ndef = list.get(3);
      pigeonResult.setNdef((ndef == null) ? null : PigeonNdef.fromList((ArrayList<Object>) ndef));
      Object nfcA = list.get(4);
      pigeonResult.setNfcA((nfcA == null) ? null : PigeonNfcA.fromList((ArrayList<Object>) nfcA));
      Object nfcB = list.get(5);
      pigeonResult.setNfcB((nfcB == null) ? null : PigeonNfcB.fromList((ArrayList<Object>) nfcB));
      Object nfcF = list.get(6);
      pigeonResult.setNfcF((nfcF == null) ? null : PigeonNfcF.fromList((ArrayList<Object>) nfcF));
      Object nfcV = list.get(7);
      pigeonResult.setNfcV((nfcV == null) ? null : PigeonNfcV.fromList((ArrayList<Object>) nfcV));
      Object isoDep = list.get(8);
      pigeonResult.setIsoDep((isoDep == null) ? null : PigeonIsoDep.fromList((ArrayList<Object>) isoDep));
      Object mifareClassic = list.get(9);
      pigeonResult.setMifareClassic((mifareClassic == null) ? null : PigeonMifareClassic.fromList((ArrayList<Object>) mifareClassic));
      Object mifareUltralight = list.get(10);
      pigeonResult.setMifareUltralight((mifareUltralight == null) ? null : PigeonMifareUltralight.fromList((ArrayList<Object>) mifareUltralight));
      Object ndefFormatable = list.get(11);
      pigeonResult.setNdefFormatable((String) ndefFormatable);
      Object nfcBarcode = list.get(12);
      pigeonResult.setNfcBarcode((nfcBarcode == null) ? null : PigeonNfcBarcode.fromList((ArrayList<Object>) nfcBarcode));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class PigeonNdef {
    private @Nullable String type;

    public @Nullable String getType() {
      return type;
    }

    public void setType(@Nullable String setterArg) {
      this.type = setterArg;
    }

    private @Nullable Boolean canMakeReadOnly;

    public @Nullable Boolean getCanMakeReadOnly() {
      return canMakeReadOnly;
    }

    public void setCanMakeReadOnly(@Nullable Boolean setterArg) {
      this.canMakeReadOnly = setterArg;
    }

    private @Nullable Boolean isWritable;

    public @Nullable Boolean getIsWritable() {
      return isWritable;
    }

    public void setIsWritable(@Nullable Boolean setterArg) {
      this.isWritable = setterArg;
    }

    private @Nullable Long maxSize;

    public @Nullable Long getMaxSize() {
      return maxSize;
    }

    public void setMaxSize(@Nullable Long setterArg) {
      this.maxSize = setterArg;
    }

    private @Nullable PigeonNdefMessage cachedNdefMessage;

    public @Nullable PigeonNdefMessage getCachedNdefMessage() {
      return cachedNdefMessage;
    }

    public void setCachedNdefMessage(@Nullable PigeonNdefMessage setterArg) {
      this.cachedNdefMessage = setterArg;
    }

    public static final class Builder {

      private @Nullable String type;

      public @NonNull Builder setType(@Nullable String setterArg) {
        this.type = setterArg;
        return this;
      }

      private @Nullable Boolean canMakeReadOnly;

      public @NonNull Builder setCanMakeReadOnly(@Nullable Boolean setterArg) {
        this.canMakeReadOnly = setterArg;
        return this;
      }

      private @Nullable Boolean isWritable;

      public @NonNull Builder setIsWritable(@Nullable Boolean setterArg) {
        this.isWritable = setterArg;
        return this;
      }

      private @Nullable Long maxSize;

      public @NonNull Builder setMaxSize(@Nullable Long setterArg) {
        this.maxSize = setterArg;
        return this;
      }

      private @Nullable PigeonNdefMessage cachedNdefMessage;

      public @NonNull Builder setCachedNdefMessage(@Nullable PigeonNdefMessage setterArg) {
        this.cachedNdefMessage = setterArg;
        return this;
      }

      public @NonNull PigeonNdef build() {
        PigeonNdef pigeonReturn = new PigeonNdef();
        pigeonReturn.setType(type);
        pigeonReturn.setCanMakeReadOnly(canMakeReadOnly);
        pigeonReturn.setIsWritable(isWritable);
        pigeonReturn.setMaxSize(maxSize);
        pigeonReturn.setCachedNdefMessage(cachedNdefMessage);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(5);
      toListResult.add(type);
      toListResult.add(canMakeReadOnly);
      toListResult.add(isWritable);
      toListResult.add(maxSize);
      toListResult.add((cachedNdefMessage == null) ? null : cachedNdefMessage.toList());
      return toListResult;
    }

    static @NonNull PigeonNdef fromList(@NonNull ArrayList<Object> list) {
      PigeonNdef pigeonResult = new PigeonNdef();
      Object type = list.get(0);
      pigeonResult.setType((String) type);
      Object canMakeReadOnly = list.get(1);
      pigeonResult.setCanMakeReadOnly((Boolean) canMakeReadOnly);
      Object isWritable = list.get(2);
      pigeonResult.setIsWritable((Boolean) isWritable);
      Object maxSize = list.get(3);
      pigeonResult.setMaxSize((maxSize == null) ? null : ((maxSize instanceof Integer) ? (Integer) maxSize : (Long) maxSize));
      Object cachedNdefMessage = list.get(4);
      pigeonResult.setCachedNdefMessage((cachedNdefMessage == null) ? null : PigeonNdefMessage.fromList((ArrayList<Object>) cachedNdefMessage));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class PigeonNfcA {
    private @Nullable byte[] atqa;

    public @Nullable byte[] getAtqa() {
      return atqa;
    }

    public void setAtqa(@Nullable byte[] setterArg) {
      this.atqa = setterArg;
    }

    private @Nullable Long sak;

    public @Nullable Long getSak() {
      return sak;
    }

    public void setSak(@Nullable Long setterArg) {
      this.sak = setterArg;
    }

    public static final class Builder {

      private @Nullable byte[] atqa;

      public @NonNull Builder setAtqa(@Nullable byte[] setterArg) {
        this.atqa = setterArg;
        return this;
      }

      private @Nullable Long sak;

      public @NonNull Builder setSak(@Nullable Long setterArg) {
        this.sak = setterArg;
        return this;
      }

      public @NonNull PigeonNfcA build() {
        PigeonNfcA pigeonReturn = new PigeonNfcA();
        pigeonReturn.setAtqa(atqa);
        pigeonReturn.setSak(sak);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(atqa);
      toListResult.add(sak);
      return toListResult;
    }

    static @NonNull PigeonNfcA fromList(@NonNull ArrayList<Object> list) {
      PigeonNfcA pigeonResult = new PigeonNfcA();
      Object atqa = list.get(0);
      pigeonResult.setAtqa((byte[]) atqa);
      Object sak = list.get(1);
      pigeonResult.setSak((sak == null) ? null : ((sak instanceof Integer) ? (Integer) sak : (Long) sak));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class PigeonNfcB {
    private @Nullable byte[] applicationData;

    public @Nullable byte[] getApplicationData() {
      return applicationData;
    }

    public void setApplicationData(@Nullable byte[] setterArg) {
      this.applicationData = setterArg;
    }

    private @Nullable byte[] protocolInfo;

    public @Nullable byte[] getProtocolInfo() {
      return protocolInfo;
    }

    public void setProtocolInfo(@Nullable byte[] setterArg) {
      this.protocolInfo = setterArg;
    }

    public static final class Builder {

      private @Nullable byte[] applicationData;

      public @NonNull Builder setApplicationData(@Nullable byte[] setterArg) {
        this.applicationData = setterArg;
        return this;
      }

      private @Nullable byte[] protocolInfo;

      public @NonNull Builder setProtocolInfo(@Nullable byte[] setterArg) {
        this.protocolInfo = setterArg;
        return this;
      }

      public @NonNull PigeonNfcB build() {
        PigeonNfcB pigeonReturn = new PigeonNfcB();
        pigeonReturn.setApplicationData(applicationData);
        pigeonReturn.setProtocolInfo(protocolInfo);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(applicationData);
      toListResult.add(protocolInfo);
      return toListResult;
    }

    static @NonNull PigeonNfcB fromList(@NonNull ArrayList<Object> list) {
      PigeonNfcB pigeonResult = new PigeonNfcB();
      Object applicationData = list.get(0);
      pigeonResult.setApplicationData((byte[]) applicationData);
      Object protocolInfo = list.get(1);
      pigeonResult.setProtocolInfo((byte[]) protocolInfo);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class PigeonNfcF {
    private @Nullable byte[] manufacturer;

    public @Nullable byte[] getManufacturer() {
      return manufacturer;
    }

    public void setManufacturer(@Nullable byte[] setterArg) {
      this.manufacturer = setterArg;
    }

    private @Nullable byte[] systemCode;

    public @Nullable byte[] getSystemCode() {
      return systemCode;
    }

    public void setSystemCode(@Nullable byte[] setterArg) {
      this.systemCode = setterArg;
    }

    public static final class Builder {

      private @Nullable byte[] manufacturer;

      public @NonNull Builder setManufacturer(@Nullable byte[] setterArg) {
        this.manufacturer = setterArg;
        return this;
      }

      private @Nullable byte[] systemCode;

      public @NonNull Builder setSystemCode(@Nullable byte[] setterArg) {
        this.systemCode = setterArg;
        return this;
      }

      public @NonNull PigeonNfcF build() {
        PigeonNfcF pigeonReturn = new PigeonNfcF();
        pigeonReturn.setManufacturer(manufacturer);
        pigeonReturn.setSystemCode(systemCode);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(manufacturer);
      toListResult.add(systemCode);
      return toListResult;
    }

    static @NonNull PigeonNfcF fromList(@NonNull ArrayList<Object> list) {
      PigeonNfcF pigeonResult = new PigeonNfcF();
      Object manufacturer = list.get(0);
      pigeonResult.setManufacturer((byte[]) manufacturer);
      Object systemCode = list.get(1);
      pigeonResult.setSystemCode((byte[]) systemCode);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class PigeonNfcV {
    private @Nullable Long dsfId;

    public @Nullable Long getDsfId() {
      return dsfId;
    }

    public void setDsfId(@Nullable Long setterArg) {
      this.dsfId = setterArg;
    }

    private @Nullable Long responseFlags;

    public @Nullable Long getResponseFlags() {
      return responseFlags;
    }

    public void setResponseFlags(@Nullable Long setterArg) {
      this.responseFlags = setterArg;
    }

    public static final class Builder {

      private @Nullable Long dsfId;

      public @NonNull Builder setDsfId(@Nullable Long setterArg) {
        this.dsfId = setterArg;
        return this;
      }

      private @Nullable Long responseFlags;

      public @NonNull Builder setResponseFlags(@Nullable Long setterArg) {
        this.responseFlags = setterArg;
        return this;
      }

      public @NonNull PigeonNfcV build() {
        PigeonNfcV pigeonReturn = new PigeonNfcV();
        pigeonReturn.setDsfId(dsfId);
        pigeonReturn.setResponseFlags(responseFlags);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(dsfId);
      toListResult.add(responseFlags);
      return toListResult;
    }

    static @NonNull PigeonNfcV fromList(@NonNull ArrayList<Object> list) {
      PigeonNfcV pigeonResult = new PigeonNfcV();
      Object dsfId = list.get(0);
      pigeonResult.setDsfId((dsfId == null) ? null : ((dsfId instanceof Integer) ? (Integer) dsfId : (Long) dsfId));
      Object responseFlags = list.get(1);
      pigeonResult.setResponseFlags((responseFlags == null) ? null : ((responseFlags instanceof Integer) ? (Integer) responseFlags : (Long) responseFlags));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class PigeonIsoDep {
    private @Nullable byte[] hiLayerResponse;

    public @Nullable byte[] getHiLayerResponse() {
      return hiLayerResponse;
    }

    public void setHiLayerResponse(@Nullable byte[] setterArg) {
      this.hiLayerResponse = setterArg;
    }

    private @Nullable byte[] historicalBytes;

    public @Nullable byte[] getHistoricalBytes() {
      return historicalBytes;
    }

    public void setHistoricalBytes(@Nullable byte[] setterArg) {
      this.historicalBytes = setterArg;
    }

    private @Nullable Boolean isExtendedLengthApduSupported;

    public @Nullable Boolean getIsExtendedLengthApduSupported() {
      return isExtendedLengthApduSupported;
    }

    public void setIsExtendedLengthApduSupported(@Nullable Boolean setterArg) {
      this.isExtendedLengthApduSupported = setterArg;
    }

    public static final class Builder {

      private @Nullable byte[] hiLayerResponse;

      public @NonNull Builder setHiLayerResponse(@Nullable byte[] setterArg) {
        this.hiLayerResponse = setterArg;
        return this;
      }

      private @Nullable byte[] historicalBytes;

      public @NonNull Builder setHistoricalBytes(@Nullable byte[] setterArg) {
        this.historicalBytes = setterArg;
        return this;
      }

      private @Nullable Boolean isExtendedLengthApduSupported;

      public @NonNull Builder setIsExtendedLengthApduSupported(@Nullable Boolean setterArg) {
        this.isExtendedLengthApduSupported = setterArg;
        return this;
      }

      public @NonNull PigeonIsoDep build() {
        PigeonIsoDep pigeonReturn = new PigeonIsoDep();
        pigeonReturn.setHiLayerResponse(hiLayerResponse);
        pigeonReturn.setHistoricalBytes(historicalBytes);
        pigeonReturn.setIsExtendedLengthApduSupported(isExtendedLengthApduSupported);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(3);
      toListResult.add(hiLayerResponse);
      toListResult.add(historicalBytes);
      toListResult.add(isExtendedLengthApduSupported);
      return toListResult;
    }

    static @NonNull PigeonIsoDep fromList(@NonNull ArrayList<Object> list) {
      PigeonIsoDep pigeonResult = new PigeonIsoDep();
      Object hiLayerResponse = list.get(0);
      pigeonResult.setHiLayerResponse((byte[]) hiLayerResponse);
      Object historicalBytes = list.get(1);
      pigeonResult.setHistoricalBytes((byte[]) historicalBytes);
      Object isExtendedLengthApduSupported = list.get(2);
      pigeonResult.setIsExtendedLengthApduSupported((Boolean) isExtendedLengthApduSupported);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class PigeonMifareClassic {
    private @Nullable Long type;

    public @Nullable Long getType() {
      return type;
    }

    public void setType(@Nullable Long setterArg) {
      this.type = setterArg;
    }

    private @Nullable Long blockCount;

    public @Nullable Long getBlockCount() {
      return blockCount;
    }

    public void setBlockCount(@Nullable Long setterArg) {
      this.blockCount = setterArg;
    }

    private @Nullable Long sectorCount;

    public @Nullable Long getSectorCount() {
      return sectorCount;
    }

    public void setSectorCount(@Nullable Long setterArg) {
      this.sectorCount = setterArg;
    }

    private @Nullable Long size;

    public @Nullable Long getSize() {
      return size;
    }

    public void setSize(@Nullable Long setterArg) {
      this.size = setterArg;
    }

    public static final class Builder {

      private @Nullable Long type;

      public @NonNull Builder setType(@Nullable Long setterArg) {
        this.type = setterArg;
        return this;
      }

      private @Nullable Long blockCount;

      public @NonNull Builder setBlockCount(@Nullable Long setterArg) {
        this.blockCount = setterArg;
        return this;
      }

      private @Nullable Long sectorCount;

      public @NonNull Builder setSectorCount(@Nullable Long setterArg) {
        this.sectorCount = setterArg;
        return this;
      }

      private @Nullable Long size;

      public @NonNull Builder setSize(@Nullable Long setterArg) {
        this.size = setterArg;
        return this;
      }

      public @NonNull PigeonMifareClassic build() {
        PigeonMifareClassic pigeonReturn = new PigeonMifareClassic();
        pigeonReturn.setType(type);
        pigeonReturn.setBlockCount(blockCount);
        pigeonReturn.setSectorCount(sectorCount);
        pigeonReturn.setSize(size);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(4);
      toListResult.add(type);
      toListResult.add(blockCount);
      toListResult.add(sectorCount);
      toListResult.add(size);
      return toListResult;
    }

    static @NonNull PigeonMifareClassic fromList(@NonNull ArrayList<Object> list) {
      PigeonMifareClassic pigeonResult = new PigeonMifareClassic();
      Object type = list.get(0);
      pigeonResult.setType((type == null) ? null : ((type instanceof Integer) ? (Integer) type : (Long) type));
      Object blockCount = list.get(1);
      pigeonResult.setBlockCount((blockCount == null) ? null : ((blockCount instanceof Integer) ? (Integer) blockCount : (Long) blockCount));
      Object sectorCount = list.get(2);
      pigeonResult.setSectorCount((sectorCount == null) ? null : ((sectorCount instanceof Integer) ? (Integer) sectorCount : (Long) sectorCount));
      Object size = list.get(3);
      pigeonResult.setSize((size == null) ? null : ((size instanceof Integer) ? (Integer) size : (Long) size));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class PigeonMifareUltralight {
    private @Nullable Long type;

    public @Nullable Long getType() {
      return type;
    }

    public void setType(@Nullable Long setterArg) {
      this.type = setterArg;
    }

    public static final class Builder {

      private @Nullable Long type;

      public @NonNull Builder setType(@Nullable Long setterArg) {
        this.type = setterArg;
        return this;
      }

      public @NonNull PigeonMifareUltralight build() {
        PigeonMifareUltralight pigeonReturn = new PigeonMifareUltralight();
        pigeonReturn.setType(type);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(1);
      toListResult.add(type);
      return toListResult;
    }

    static @NonNull PigeonMifareUltralight fromList(@NonNull ArrayList<Object> list) {
      PigeonMifareUltralight pigeonResult = new PigeonMifareUltralight();
      Object type = list.get(0);
      pigeonResult.setType((type == null) ? null : ((type instanceof Integer) ? (Integer) type : (Long) type));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class PigeonNfcBarcode {
    private @Nullable Long type;

    public @Nullable Long getType() {
      return type;
    }

    public void setType(@Nullable Long setterArg) {
      this.type = setterArg;
    }

    private @Nullable byte[] barcode;

    public @Nullable byte[] getBarcode() {
      return barcode;
    }

    public void setBarcode(@Nullable byte[] setterArg) {
      this.barcode = setterArg;
    }

    public static final class Builder {

      private @Nullable Long type;

      public @NonNull Builder setType(@Nullable Long setterArg) {
        this.type = setterArg;
        return this;
      }

      private @Nullable byte[] barcode;

      public @NonNull Builder setBarcode(@Nullable byte[] setterArg) {
        this.barcode = setterArg;
        return this;
      }

      public @NonNull PigeonNfcBarcode build() {
        PigeonNfcBarcode pigeonReturn = new PigeonNfcBarcode();
        pigeonReturn.setType(type);
        pigeonReturn.setBarcode(barcode);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(type);
      toListResult.add(barcode);
      return toListResult;
    }

    static @NonNull PigeonNfcBarcode fromList(@NonNull ArrayList<Object> list) {
      PigeonNfcBarcode pigeonResult = new PigeonNfcBarcode();
      Object type = list.get(0);
      pigeonResult.setType((type == null) ? null : ((type instanceof Integer) ? (Integer) type : (Long) type));
      Object barcode = list.get(1);
      pigeonResult.setBarcode((byte[]) barcode);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class PigeonNdefMessage {
    private @Nullable List<PigeonNdefRecord> records;

    public @Nullable List<PigeonNdefRecord> getRecords() {
      return records;
    }

    public void setRecords(@Nullable List<PigeonNdefRecord> setterArg) {
      this.records = setterArg;
    }

    public static final class Builder {

      private @Nullable List<PigeonNdefRecord> records;

      public @NonNull Builder setRecords(@Nullable List<PigeonNdefRecord> setterArg) {
        this.records = setterArg;
        return this;
      }

      public @NonNull PigeonNdefMessage build() {
        PigeonNdefMessage pigeonReturn = new PigeonNdefMessage();
        pigeonReturn.setRecords(records);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(1);
      toListResult.add(records);
      return toListResult;
    }

    static @NonNull PigeonNdefMessage fromList(@NonNull ArrayList<Object> list) {
      PigeonNdefMessage pigeonResult = new PigeonNdefMessage();
      Object records = list.get(0);
      pigeonResult.setRecords((List<PigeonNdefRecord>) records);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class PigeonNdefRecord {
    private @Nullable PigeonTypeNameFormat tnf;

    public @Nullable PigeonTypeNameFormat getTnf() {
      return tnf;
    }

    public void setTnf(@Nullable PigeonTypeNameFormat setterArg) {
      this.tnf = setterArg;
    }

    private @Nullable byte[] type;

    public @Nullable byte[] getType() {
      return type;
    }

    public void setType(@Nullable byte[] setterArg) {
      this.type = setterArg;
    }

    private @Nullable byte[] id;

    public @Nullable byte[] getId() {
      return id;
    }

    public void setId(@Nullable byte[] setterArg) {
      this.id = setterArg;
    }

    private @Nullable byte[] payload;

    public @Nullable byte[] getPayload() {
      return payload;
    }

    public void setPayload(@Nullable byte[] setterArg) {
      this.payload = setterArg;
    }

    public static final class Builder {

      private @Nullable PigeonTypeNameFormat tnf;

      public @NonNull Builder setTnf(@Nullable PigeonTypeNameFormat setterArg) {
        this.tnf = setterArg;
        return this;
      }

      private @Nullable byte[] type;

      public @NonNull Builder setType(@Nullable byte[] setterArg) {
        this.type = setterArg;
        return this;
      }

      private @Nullable byte[] id;

      public @NonNull Builder setId(@Nullable byte[] setterArg) {
        this.id = setterArg;
        return this;
      }

      private @Nullable byte[] payload;

      public @NonNull Builder setPayload(@Nullable byte[] setterArg) {
        this.payload = setterArg;
        return this;
      }

      public @NonNull PigeonNdefRecord build() {
        PigeonNdefRecord pigeonReturn = new PigeonNdefRecord();
        pigeonReturn.setTnf(tnf);
        pigeonReturn.setType(type);
        pigeonReturn.setId(id);
        pigeonReturn.setPayload(payload);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(4);
      toListResult.add(tnf == null ? null : tnf.index);
      toListResult.add(type);
      toListResult.add(id);
      toListResult.add(payload);
      return toListResult;
    }

    static @NonNull PigeonNdefRecord fromList(@NonNull ArrayList<Object> list) {
      PigeonNdefRecord pigeonResult = new PigeonNdefRecord();
      Object tnf = list.get(0);
      pigeonResult.setTnf(tnf == null ? null : PigeonTypeNameFormat.values()[(int) tnf]);
      Object type = list.get(1);
      pigeonResult.setType((byte[]) type);
      Object id = list.get(2);
      pigeonResult.setId((byte[]) id);
      Object payload = list.get(3);
      pigeonResult.setPayload((byte[]) payload);
      return pigeonResult;
    }
  }

  private static class PigeonFlutterApiCodec extends StandardMessageCodec {
    public static final PigeonFlutterApiCodec INSTANCE = new PigeonFlutterApiCodec();

    private PigeonFlutterApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return PigeonIsoDep.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 129:
          return PigeonMifareClassic.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 130:
          return PigeonMifareUltralight.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 131:
          return PigeonNdef.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 132:
          return PigeonNdefMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 133:
          return PigeonNdefRecord.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 134:
          return PigeonNfcA.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 135:
          return PigeonNfcB.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 136:
          return PigeonNfcBarcode.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 137:
          return PigeonNfcF.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 138:
          return PigeonNfcV.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 139:
          return PigeonTag.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof PigeonIsoDep) {
        stream.write(128);
        writeValue(stream, ((PigeonIsoDep) value).toList());
      } else if (value instanceof PigeonMifareClassic) {
        stream.write(129);
        writeValue(stream, ((PigeonMifareClassic) value).toList());
      } else if (value instanceof PigeonMifareUltralight) {
        stream.write(130);
        writeValue(stream, ((PigeonMifareUltralight) value).toList());
      } else if (value instanceof PigeonNdef) {
        stream.write(131);
        writeValue(stream, ((PigeonNdef) value).toList());
      } else if (value instanceof PigeonNdefMessage) {
        stream.write(132);
        writeValue(stream, ((PigeonNdefMessage) value).toList());
      } else if (value instanceof PigeonNdefRecord) {
        stream.write(133);
        writeValue(stream, ((PigeonNdefRecord) value).toList());
      } else if (value instanceof PigeonNfcA) {
        stream.write(134);
        writeValue(stream, ((PigeonNfcA) value).toList());
      } else if (value instanceof PigeonNfcB) {
        stream.write(135);
        writeValue(stream, ((PigeonNfcB) value).toList());
      } else if (value instanceof PigeonNfcBarcode) {
        stream.write(136);
        writeValue(stream, ((PigeonNfcBarcode) value).toList());
      } else if (value instanceof PigeonNfcF) {
        stream.write(137);
        writeValue(stream, ((PigeonNfcF) value).toList());
      } else if (value instanceof PigeonNfcV) {
        stream.write(138);
        writeValue(stream, ((PigeonNfcV) value).toList());
      } else if (value instanceof PigeonTag) {
        stream.write(139);
        writeValue(stream, ((PigeonTag) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java. */
  public static final class PigeonFlutterApi {
    private final BinaryMessenger binaryMessenger;

    public PigeonFlutterApi(BinaryMessenger argBinaryMessenger) {
      this.binaryMessenger = argBinaryMessenger;
    }

    /** Public interface for sending reply. */     public interface Reply<T> {
      void reply(T reply);
    }
    /** The codec used by PigeonFlutterApi. */
    static MessageCodec<Object> getCodec() {
      return PigeonFlutterApiCodec.INSTANCE;
    }
    public void onTagDiscovered(@NonNull PigeonTag tagArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.PigeonFlutterApi.onTagDiscovered", getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(tagArg)),
          channelReply -> callback.reply(null));
    }
    public void onAdapterStateChanged(@NonNull Long stateArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, "dev.flutter.pigeon.PigeonFlutterApi.onAdapterStateChanged", getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(stateArg)),
          channelReply -> callback.reply(null));
    }
  }

  private static class PigeonHostApiCodec extends StandardMessageCodec {
    public static final PigeonHostApiCodec INSTANCE = new PigeonHostApiCodec();

    private PigeonHostApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return PigeonNdefMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 129:
          return PigeonNdefMessage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 130:
          return PigeonNdefRecord.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof PigeonNdefMessage) {
        stream.write(128);
        writeValue(stream, ((PigeonNdefMessage) value).toList());
      } else if (value instanceof PigeonNdefMessage) {
        stream.write(129);
        writeValue(stream, ((PigeonNdefMessage) value).toList());
      } else if (value instanceof PigeonNdefRecord) {
        stream.write(130);
        writeValue(stream, ((PigeonNdefRecord) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface PigeonHostApi {

    @NonNull 
    Boolean adapterIsEnabled();

    @NonNull 
    Boolean adapterIsSecureNfcEnabled();

    @NonNull 
    Boolean adapterIsSecureNfcSupported();

    void adapterEnableReaderMode(@NonNull List<PigeonReaderFlag> flags);

    void adapterDisableReaderMode();

    void adapterEnableForegroundDispatch();

    void adapterDisableForegroundDispatch();

    @Nullable 
    PigeonNdefMessage ndefGetNdefMessage(@NonNull String handle);

    void ndefWriteNdefMessage(@NonNull String handle, @NonNull PigeonNdefMessage message);

    @NonNull 
    Boolean ndefMakeReadOnly(@NonNull String handle);

    @NonNull 
    Long nfcAGetMaxTransceiveLength(@NonNull String handle);

    @NonNull 
    Long nfcAGetTimeout(@NonNull String handle);

    void nfcASetTimeout(@NonNull String handle, @NonNull Long timeout);

    @NonNull 
    byte[] nfcATransceive(@NonNull String handle, @NonNull byte[] data);

    @NonNull 
    Long nfcBGetMaxTransceiveLength(@NonNull String handle);

    @NonNull 
    byte[] nfcBTransceive(@NonNull String handle, @NonNull byte[] data);

    @NonNull 
    Long nfcFGetMaxTransceiveLength(@NonNull String handle);

    @NonNull 
    Long nfcFGetTimeout(@NonNull String handle);

    void nfcFSetTimeout(@NonNull String handle, @NonNull Long timeout);

    @NonNull 
    byte[] nfcFTransceive(@NonNull String handle, @NonNull byte[] data);

    @NonNull 
    Long nfcVGetMaxTransceiveLength(@NonNull String handle);

    @NonNull 
    byte[] nfcVTransceive(@NonNull String handle, @NonNull byte[] data);

    @NonNull 
    Long isoDepGetMaxTransceiveLength(@NonNull String handle);

    @NonNull 
    Long isoDepGetTimeout(@NonNull String handle);

    void isoDepSetTimeout(@NonNull String handle, @NonNull Long timeout);

    @NonNull 
    byte[] isoDepTransceive(@NonNull String handle, @NonNull byte[] data);

    @NonNull 
    Long mifareClassicGetMaxTransceiveLength(@NonNull String handle);

    @NonNull 
    Long mifareClassicGetTimeout(@NonNull String handle);

    void mifareClassicSetTimeout(@NonNull String handle, @NonNull Long timeout);

    @NonNull 
    Long mifareClassicBlockToSector(@NonNull String handle, @NonNull Long blockIndex);

    @NonNull 
    Long mifareClassicGetBlockCountInSector(@NonNull String handle, @NonNull Long sectorIndex);

    @NonNull 
    Long mifareClassicSectorToBlock(@NonNull String handle, @NonNull Long sectorIndex);

    @NonNull 
    Boolean mifareClassicAuthenticateSectorWithKeyA(@NonNull String handle, @NonNull Long sectorIndex, @NonNull byte[] key);

    @NonNull 
    Boolean mifareClassicAuthenticateSectorWithKeyB(@NonNull String handle, @NonNull Long sectorIndex, @NonNull byte[] key);

    void mifareClassicIncrement(@NonNull String handle, @NonNull Long blockIndex, @NonNull Long value);

    void mifareClassicDecrement(@NonNull String handle, @NonNull Long blockIndex, @NonNull Long value);

    @NonNull 
    byte[] mifareClassicReadBlock(@NonNull String handle, @NonNull Long blockIndex);

    void mifareClassicWriteBlock(@NonNull String handle, @NonNull Long blockIndex, @NonNull byte[] data);

    void mifareClassicRestore(@NonNull String handle, @NonNull Long blockIndex);

    void mifareClassicTransfer(@NonNull String handle, @NonNull Long blockIndex);

    @NonNull 
    byte[] mifareClassicTransceive(@NonNull String handle, @NonNull byte[] data);

    @NonNull 
    Long mifareUltralightGetMaxTransceiveLength(@NonNull String handle);

    @NonNull 
    Long mifareUltralightGetTimeout(@NonNull String handle);

    void mifareUltralightSetTimeout(@NonNull String handle, @NonNull Long timeout);

    @NonNull 
    byte[] mifareUltralightReadPages(@NonNull String handle, @NonNull Long pageOffset);

    void mifareUltralightWritePage(@NonNull String handle, @NonNull Long pageOffset, @NonNull byte[] data);

    @NonNull 
    byte[] mifareUltralightTransceive(@NonNull String handle, @NonNull byte[] data);

    void ndefFormatableFormat(@NonNull String handle, @NonNull PigeonNdefMessage firstMessage);

    void ndefFormatableFormatReadOnly(@NonNull String handle, @NonNull PigeonNdefMessage firstMessage);

    void disposeTag(@NonNull String handle);

    /** The codec used by PigeonHostApi. */
    static MessageCodec<Object> getCodec() {
      return PigeonHostApiCodec.INSTANCE;
    }
    /**Sets up an instance of `PigeonHostApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, PigeonHostApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PigeonHostApi.adapterIsEnabled", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  Boolean output = api.adapterIsEnabled();
                  wrapped.add(0, output);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PigeonHostApi.adapterIsSecureNfcEnabled", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  Boolean output = api.adapterIsSecureNfcEnabled();
                  wrapped.add(0, output);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PigeonHostApi.adapterIsSecureNfcSupported", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  Boolean output = api.adapterIsSecureNfcSupported();
                  wrapped.add(0, output);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PigeonHostApi.adapterEnableReaderMode", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  List<PigeonReaderFlag> flagsArg = (List<PigeonReaderFlag>) args.get(0);
                  if (flagsArg == null) {
                    throw new NullPointerException("flagsArg unexpectedly null.");
                  }
                  api.adapterEnableReaderMode(flagsArg);
                  wrapped.add(0, null);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PigeonHostApi.adapterDisableReaderMode", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  api.adapterDisableReaderMode();
                  wrapped.add(0, null);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PigeonHostApi.adapterEnableForegroundDispatch", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  api.adapterEnableForegroundDispatch();
                  wrapped.add(0, null);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PigeonHostApi.adapterDisableForegroundDispatch", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  api.adapterDisableForegroundDispatch();
                  wrapped.add(0, null);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PigeonHostApi.ndefGetNdefMessage", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  String handleArg = (String) args.get(0);
                  if (handleArg == null) {
                    throw new NullPointerException("handleArg unexpectedly null.");
                  }
                  PigeonNdefMessage output = api.ndefGetNdefMessage(handleArg);
                  wrapped.add(0, output);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PigeonHostApi.ndefWriteNdefMessage", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  String handleArg = (String) args.get(0);
                  if (handleArg == null) {
                    throw new NullPointerException("handleArg unexpectedly null.");
                  }
                  PigeonNdefMessage messageArg = (PigeonNdefMessage) args.get(1);
                  if (messageArg == null) {
                    throw new NullPointerException("messageArg unexpectedly null.");
                  }
                  api.ndefWriteNdefMessage(handleArg, messageArg);
                  wrapped.add(0, null);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PigeonHostApi.ndefMakeReadOnly", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  String handleArg = (String) args.get(0);
                  if (handleArg == null) {
                    throw new NullPointerException("handleArg unexpectedly null.");
                  }
                  Boolean output = api.ndefMakeReadOnly(handleArg);
                  wrapped.add(0, output);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PigeonHostApi.nfcAGetMaxTransceiveLength", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  String handleArg = (String) args.get(0);
                  if (handleArg == null) {
                    throw new NullPointerException("handleArg unexpectedly null.");
                  }
                  Long output = api.nfcAGetMaxTransceiveLength(handleArg);
                  wrapped.add(0, output);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PigeonHostApi.nfcAGetTimeout", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  String handleArg = (String) args.get(0);
                  if (handleArg == null) {
                    throw new NullPointerException("handleArg unexpectedly null.");
                  }
                  Long output = api.nfcAGetTimeout(handleArg);
                  wrapped.add(0, output);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PigeonHostApi.nfcASetTimeout", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  String handleArg = (String) args.get(0);
                  if (handleArg == null) {
                    throw new NullPointerException("handleArg unexpectedly null.");
                  }
                  Number timeoutArg = (Number) args.get(1);
                  if (timeoutArg == null) {
                    throw new NullPointerException("timeoutArg unexpectedly null.");
                  }
                  api.nfcASetTimeout(handleArg, (timeoutArg == null) ? null : timeoutArg.longValue());
                  wrapped.add(0, null);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PigeonHostApi.nfcATransceive", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  String handleArg = (String) args.get(0);
                  if (handleArg == null) {
                    throw new NullPointerException("handleArg unexpectedly null.");
                  }
                  byte[] dataArg = (byte[]) args.get(1);
                  if (dataArg == null) {
                    throw new NullPointerException("dataArg unexpectedly null.");
                  }
                  byte[] output = api.nfcATransceive(handleArg, dataArg);
                  wrapped.add(0, output);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PigeonHostApi.nfcBGetMaxTransceiveLength", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  String handleArg = (String) args.get(0);
                  if (handleArg == null) {
                    throw new NullPointerException("handleArg unexpectedly null.");
                  }
                  Long output = api.nfcBGetMaxTransceiveLength(handleArg);
                  wrapped.add(0, output);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PigeonHostApi.nfcBTransceive", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  String handleArg = (String) args.get(0);
                  if (handleArg == null) {
                    throw new NullPointerException("handleArg unexpectedly null.");
                  }
                  byte[] dataArg = (byte[]) args.get(1);
                  if (dataArg == null) {
                    throw new NullPointerException("dataArg unexpectedly null.");
                  }
                  byte[] output = api.nfcBTransceive(handleArg, dataArg);
                  wrapped.add(0, output);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PigeonHostApi.nfcFGetMaxTransceiveLength", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  String handleArg = (String) args.get(0);
                  if (handleArg == null) {
                    throw new NullPointerException("handleArg unexpectedly null.");
                  }
                  Long output = api.nfcFGetMaxTransceiveLength(handleArg);
                  wrapped.add(0, output);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PigeonHostApi.nfcFGetTimeout", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  String handleArg = (String) args.get(0);
                  if (handleArg == null) {
                    throw new NullPointerException("handleArg unexpectedly null.");
                  }
                  Long output = api.nfcFGetTimeout(handleArg);
                  wrapped.add(0, output);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PigeonHostApi.nfcFSetTimeout", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  String handleArg = (String) args.get(0);
                  if (handleArg == null) {
                    throw new NullPointerException("handleArg unexpectedly null.");
                  }
                  Number timeoutArg = (Number) args.get(1);
                  if (timeoutArg == null) {
                    throw new NullPointerException("timeoutArg unexpectedly null.");
                  }
                  api.nfcFSetTimeout(handleArg, (timeoutArg == null) ? null : timeoutArg.longValue());
                  wrapped.add(0, null);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PigeonHostApi.nfcFTransceive", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  String handleArg = (String) args.get(0);
                  if (handleArg == null) {
                    throw new NullPointerException("handleArg unexpectedly null.");
                  }
                  byte[] dataArg = (byte[]) args.get(1);
                  if (dataArg == null) {
                    throw new NullPointerException("dataArg unexpectedly null.");
                  }
                  byte[] output = api.nfcFTransceive(handleArg, dataArg);
                  wrapped.add(0, output);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PigeonHostApi.nfcVGetMaxTransceiveLength", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  String handleArg = (String) args.get(0);
                  if (handleArg == null) {
                    throw new NullPointerException("handleArg unexpectedly null.");
                  }
                  Long output = api.nfcVGetMaxTransceiveLength(handleArg);
                  wrapped.add(0, output);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PigeonHostApi.nfcVTransceive", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  String handleArg = (String) args.get(0);
                  if (handleArg == null) {
                    throw new NullPointerException("handleArg unexpectedly null.");
                  }
                  byte[] dataArg = (byte[]) args.get(1);
                  if (dataArg == null) {
                    throw new NullPointerException("dataArg unexpectedly null.");
                  }
                  byte[] output = api.nfcVTransceive(handleArg, dataArg);
                  wrapped.add(0, output);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PigeonHostApi.isoDepGetMaxTransceiveLength", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  String handleArg = (String) args.get(0);
                  if (handleArg == null) {
                    throw new NullPointerException("handleArg unexpectedly null.");
                  }
                  Long output = api.isoDepGetMaxTransceiveLength(handleArg);
                  wrapped.add(0, output);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PigeonHostApi.isoDepGetTimeout", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  String handleArg = (String) args.get(0);
                  if (handleArg == null) {
                    throw new NullPointerException("handleArg unexpectedly null.");
                  }
                  Long output = api.isoDepGetTimeout(handleArg);
                  wrapped.add(0, output);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PigeonHostApi.isoDepSetTimeout", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  String handleArg = (String) args.get(0);
                  if (handleArg == null) {
                    throw new NullPointerException("handleArg unexpectedly null.");
                  }
                  Number timeoutArg = (Number) args.get(1);
                  if (timeoutArg == null) {
                    throw new NullPointerException("timeoutArg unexpectedly null.");
                  }
                  api.isoDepSetTimeout(handleArg, (timeoutArg == null) ? null : timeoutArg.longValue());
                  wrapped.add(0, null);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PigeonHostApi.isoDepTransceive", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  String handleArg = (String) args.get(0);
                  if (handleArg == null) {
                    throw new NullPointerException("handleArg unexpectedly null.");
                  }
                  byte[] dataArg = (byte[]) args.get(1);
                  if (dataArg == null) {
                    throw new NullPointerException("dataArg unexpectedly null.");
                  }
                  byte[] output = api.isoDepTransceive(handleArg, dataArg);
                  wrapped.add(0, output);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PigeonHostApi.mifareClassicGetMaxTransceiveLength", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  String handleArg = (String) args.get(0);
                  if (handleArg == null) {
                    throw new NullPointerException("handleArg unexpectedly null.");
                  }
                  Long output = api.mifareClassicGetMaxTransceiveLength(handleArg);
                  wrapped.add(0, output);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PigeonHostApi.mifareClassicGetTimeout", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  String handleArg = (String) args.get(0);
                  if (handleArg == null) {
                    throw new NullPointerException("handleArg unexpectedly null.");
                  }
                  Long output = api.mifareClassicGetTimeout(handleArg);
                  wrapped.add(0, output);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PigeonHostApi.mifareClassicSetTimeout", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  String handleArg = (String) args.get(0);
                  if (handleArg == null) {
                    throw new NullPointerException("handleArg unexpectedly null.");
                  }
                  Number timeoutArg = (Number) args.get(1);
                  if (timeoutArg == null) {
                    throw new NullPointerException("timeoutArg unexpectedly null.");
                  }
                  api.mifareClassicSetTimeout(handleArg, (timeoutArg == null) ? null : timeoutArg.longValue());
                  wrapped.add(0, null);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PigeonHostApi.mifareClassicBlockToSector", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  String handleArg = (String) args.get(0);
                  if (handleArg == null) {
                    throw new NullPointerException("handleArg unexpectedly null.");
                  }
                  Number blockIndexArg = (Number) args.get(1);
                  if (blockIndexArg == null) {
                    throw new NullPointerException("blockIndexArg unexpectedly null.");
                  }
                  Long output = api.mifareClassicBlockToSector(handleArg, (blockIndexArg == null) ? null : blockIndexArg.longValue());
                  wrapped.add(0, output);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PigeonHostApi.mifareClassicGetBlockCountInSector", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  String handleArg = (String) args.get(0);
                  if (handleArg == null) {
                    throw new NullPointerException("handleArg unexpectedly null.");
                  }
                  Number sectorIndexArg = (Number) args.get(1);
                  if (sectorIndexArg == null) {
                    throw new NullPointerException("sectorIndexArg unexpectedly null.");
                  }
                  Long output = api.mifareClassicGetBlockCountInSector(handleArg, (sectorIndexArg == null) ? null : sectorIndexArg.longValue());
                  wrapped.add(0, output);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PigeonHostApi.mifareClassicSectorToBlock", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  String handleArg = (String) args.get(0);
                  if (handleArg == null) {
                    throw new NullPointerException("handleArg unexpectedly null.");
                  }
                  Number sectorIndexArg = (Number) args.get(1);
                  if (sectorIndexArg == null) {
                    throw new NullPointerException("sectorIndexArg unexpectedly null.");
                  }
                  Long output = api.mifareClassicSectorToBlock(handleArg, (sectorIndexArg == null) ? null : sectorIndexArg.longValue());
                  wrapped.add(0, output);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PigeonHostApi.mifareClassicAuthenticateSectorWithKeyA", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  String handleArg = (String) args.get(0);
                  if (handleArg == null) {
                    throw new NullPointerException("handleArg unexpectedly null.");
                  }
                  Number sectorIndexArg = (Number) args.get(1);
                  if (sectorIndexArg == null) {
                    throw new NullPointerException("sectorIndexArg unexpectedly null.");
                  }
                  byte[] keyArg = (byte[]) args.get(2);
                  if (keyArg == null) {
                    throw new NullPointerException("keyArg unexpectedly null.");
                  }
                  Boolean output = api.mifareClassicAuthenticateSectorWithKeyA(handleArg, (sectorIndexArg == null) ? null : sectorIndexArg.longValue(), keyArg);
                  wrapped.add(0, output);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PigeonHostApi.mifareClassicAuthenticateSectorWithKeyB", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  String handleArg = (String) args.get(0);
                  if (handleArg == null) {
                    throw new NullPointerException("handleArg unexpectedly null.");
                  }
                  Number sectorIndexArg = (Number) args.get(1);
                  if (sectorIndexArg == null) {
                    throw new NullPointerException("sectorIndexArg unexpectedly null.");
                  }
                  byte[] keyArg = (byte[]) args.get(2);
                  if (keyArg == null) {
                    throw new NullPointerException("keyArg unexpectedly null.");
                  }
                  Boolean output = api.mifareClassicAuthenticateSectorWithKeyB(handleArg, (sectorIndexArg == null) ? null : sectorIndexArg.longValue(), keyArg);
                  wrapped.add(0, output);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PigeonHostApi.mifareClassicIncrement", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  String handleArg = (String) args.get(0);
                  if (handleArg == null) {
                    throw new NullPointerException("handleArg unexpectedly null.");
                  }
                  Number blockIndexArg = (Number) args.get(1);
                  if (blockIndexArg == null) {
                    throw new NullPointerException("blockIndexArg unexpectedly null.");
                  }
                  Number valueArg = (Number) args.get(2);
                  if (valueArg == null) {
                    throw new NullPointerException("valueArg unexpectedly null.");
                  }
                  api.mifareClassicIncrement(handleArg, (blockIndexArg == null) ? null : blockIndexArg.longValue(), (valueArg == null) ? null : valueArg.longValue());
                  wrapped.add(0, null);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PigeonHostApi.mifareClassicDecrement", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  String handleArg = (String) args.get(0);
                  if (handleArg == null) {
                    throw new NullPointerException("handleArg unexpectedly null.");
                  }
                  Number blockIndexArg = (Number) args.get(1);
                  if (blockIndexArg == null) {
                    throw new NullPointerException("blockIndexArg unexpectedly null.");
                  }
                  Number valueArg = (Number) args.get(2);
                  if (valueArg == null) {
                    throw new NullPointerException("valueArg unexpectedly null.");
                  }
                  api.mifareClassicDecrement(handleArg, (blockIndexArg == null) ? null : blockIndexArg.longValue(), (valueArg == null) ? null : valueArg.longValue());
                  wrapped.add(0, null);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PigeonHostApi.mifareClassicReadBlock", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  String handleArg = (String) args.get(0);
                  if (handleArg == null) {
                    throw new NullPointerException("handleArg unexpectedly null.");
                  }
                  Number blockIndexArg = (Number) args.get(1);
                  if (blockIndexArg == null) {
                    throw new NullPointerException("blockIndexArg unexpectedly null.");
                  }
                  byte[] output = api.mifareClassicReadBlock(handleArg, (blockIndexArg == null) ? null : blockIndexArg.longValue());
                  wrapped.add(0, output);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PigeonHostApi.mifareClassicWriteBlock", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  String handleArg = (String) args.get(0);
                  if (handleArg == null) {
                    throw new NullPointerException("handleArg unexpectedly null.");
                  }
                  Number blockIndexArg = (Number) args.get(1);
                  if (blockIndexArg == null) {
                    throw new NullPointerException("blockIndexArg unexpectedly null.");
                  }
                  byte[] dataArg = (byte[]) args.get(2);
                  if (dataArg == null) {
                    throw new NullPointerException("dataArg unexpectedly null.");
                  }
                  api.mifareClassicWriteBlock(handleArg, (blockIndexArg == null) ? null : blockIndexArg.longValue(), dataArg);
                  wrapped.add(0, null);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PigeonHostApi.mifareClassicRestore", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  String handleArg = (String) args.get(0);
                  if (handleArg == null) {
                    throw new NullPointerException("handleArg unexpectedly null.");
                  }
                  Number blockIndexArg = (Number) args.get(1);
                  if (blockIndexArg == null) {
                    throw new NullPointerException("blockIndexArg unexpectedly null.");
                  }
                  api.mifareClassicRestore(handleArg, (blockIndexArg == null) ? null : blockIndexArg.longValue());
                  wrapped.add(0, null);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PigeonHostApi.mifareClassicTransfer", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  String handleArg = (String) args.get(0);
                  if (handleArg == null) {
                    throw new NullPointerException("handleArg unexpectedly null.");
                  }
                  Number blockIndexArg = (Number) args.get(1);
                  if (blockIndexArg == null) {
                    throw new NullPointerException("blockIndexArg unexpectedly null.");
                  }
                  api.mifareClassicTransfer(handleArg, (blockIndexArg == null) ? null : blockIndexArg.longValue());
                  wrapped.add(0, null);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PigeonHostApi.mifareClassicTransceive", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  String handleArg = (String) args.get(0);
                  if (handleArg == null) {
                    throw new NullPointerException("handleArg unexpectedly null.");
                  }
                  byte[] dataArg = (byte[]) args.get(1);
                  if (dataArg == null) {
                    throw new NullPointerException("dataArg unexpectedly null.");
                  }
                  byte[] output = api.mifareClassicTransceive(handleArg, dataArg);
                  wrapped.add(0, output);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PigeonHostApi.mifareUltralightGetMaxTransceiveLength", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  String handleArg = (String) args.get(0);
                  if (handleArg == null) {
                    throw new NullPointerException("handleArg unexpectedly null.");
                  }
                  Long output = api.mifareUltralightGetMaxTransceiveLength(handleArg);
                  wrapped.add(0, output);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PigeonHostApi.mifareUltralightGetTimeout", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  String handleArg = (String) args.get(0);
                  if (handleArg == null) {
                    throw new NullPointerException("handleArg unexpectedly null.");
                  }
                  Long output = api.mifareUltralightGetTimeout(handleArg);
                  wrapped.add(0, output);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PigeonHostApi.mifareUltralightSetTimeout", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  String handleArg = (String) args.get(0);
                  if (handleArg == null) {
                    throw new NullPointerException("handleArg unexpectedly null.");
                  }
                  Number timeoutArg = (Number) args.get(1);
                  if (timeoutArg == null) {
                    throw new NullPointerException("timeoutArg unexpectedly null.");
                  }
                  api.mifareUltralightSetTimeout(handleArg, (timeoutArg == null) ? null : timeoutArg.longValue());
                  wrapped.add(0, null);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PigeonHostApi.mifareUltralightReadPages", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  String handleArg = (String) args.get(0);
                  if (handleArg == null) {
                    throw new NullPointerException("handleArg unexpectedly null.");
                  }
                  Number pageOffsetArg = (Number) args.get(1);
                  if (pageOffsetArg == null) {
                    throw new NullPointerException("pageOffsetArg unexpectedly null.");
                  }
                  byte[] output = api.mifareUltralightReadPages(handleArg, (pageOffsetArg == null) ? null : pageOffsetArg.longValue());
                  wrapped.add(0, output);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PigeonHostApi.mifareUltralightWritePage", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  String handleArg = (String) args.get(0);
                  if (handleArg == null) {
                    throw new NullPointerException("handleArg unexpectedly null.");
                  }
                  Number pageOffsetArg = (Number) args.get(1);
                  if (pageOffsetArg == null) {
                    throw new NullPointerException("pageOffsetArg unexpectedly null.");
                  }
                  byte[] dataArg = (byte[]) args.get(2);
                  if (dataArg == null) {
                    throw new NullPointerException("dataArg unexpectedly null.");
                  }
                  api.mifareUltralightWritePage(handleArg, (pageOffsetArg == null) ? null : pageOffsetArg.longValue(), dataArg);
                  wrapped.add(0, null);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PigeonHostApi.mifareUltralightTransceive", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  String handleArg = (String) args.get(0);
                  if (handleArg == null) {
                    throw new NullPointerException("handleArg unexpectedly null.");
                  }
                  byte[] dataArg = (byte[]) args.get(1);
                  if (dataArg == null) {
                    throw new NullPointerException("dataArg unexpectedly null.");
                  }
                  byte[] output = api.mifareUltralightTransceive(handleArg, dataArg);
                  wrapped.add(0, output);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PigeonHostApi.ndefFormatableFormat", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  String handleArg = (String) args.get(0);
                  if (handleArg == null) {
                    throw new NullPointerException("handleArg unexpectedly null.");
                  }
                  PigeonNdefMessage firstMessageArg = (PigeonNdefMessage) args.get(1);
                  if (firstMessageArg == null) {
                    throw new NullPointerException("firstMessageArg unexpectedly null.");
                  }
                  api.ndefFormatableFormat(handleArg, firstMessageArg);
                  wrapped.add(0, null);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PigeonHostApi.ndefFormatableFormatReadOnly", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  String handleArg = (String) args.get(0);
                  if (handleArg == null) {
                    throw new NullPointerException("handleArg unexpectedly null.");
                  }
                  PigeonNdefMessage firstMessageArg = (PigeonNdefMessage) args.get(1);
                  if (firstMessageArg == null) {
                    throw new NullPointerException("firstMessageArg unexpectedly null.");
                  }
                  api.ndefFormatableFormatReadOnly(handleArg, firstMessageArg);
                  wrapped.add(0, null);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PigeonHostApi.disposeTag", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  ArrayList<Object> args = (ArrayList<Object>) message;
                  assert args != null;
                  String handleArg = (String) args.get(0);
                  if (handleArg == null) {
                    throw new NullPointerException("handleArg unexpectedly null.");
                  }
                  api.disposeTag(handleArg);
                  wrapped.add(0, null);
                } catch (Error | RuntimeException exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
}
